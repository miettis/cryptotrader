//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AssetsClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? 'https://localhost:32776';
  }

  getAll(): Promise<AssetResponse[]> {
    let url_ = this.baseUrl + '/api/assets';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAll(_response);
    });
  }

  protected processGetAll(response: Response): Promise<AssetResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(AssetResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<AssetResponse[]>(null as any);
  }

  follow(symbol: string): Promise<void> {
    let url_ = this.baseUrl + '/api/assets/{symbol}/follow';
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace('{symbol}', encodeURIComponent('' + symbol));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFollow(_response);
    });
  }

  protected processFollow(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException(
          'A server side error occurred.',
          status,
          _responseText,
          _headers,
          result404
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  unfollow(symbol: string): Promise<void> {
    let url_ = this.baseUrl + '/api/assets/{symbol}/unfollow';
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace('{symbol}', encodeURIComponent('' + symbol));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUnfollow(_response);
    });
  }

  protected processUnfollow(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException(
          'A server side error occurred.',
          status,
          _responseText,
          _headers,
          result404
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  enableTrade(symbol: string): Promise<void> {
    let url_ = this.baseUrl + '/api/assets/{symbol}/trade/enable';
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace('{symbol}', encodeURIComponent('' + symbol));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processEnableTrade(_response);
    });
  }

  protected processEnableTrade(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException(
          'A server side error occurred.',
          status,
          _responseText,
          _headers,
          result404
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  disableTrade(symbol: string): Promise<void> {
    let url_ = this.baseUrl + '/api/assets/{symbol}/trade/disable';
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace('{symbol}', encodeURIComponent('' + symbol));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDisableTrade(_response);
    });
  }

  protected processDisableTrade(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException(
          'A server side error occurred.',
          status,
          _responseText,
          _headers,
          result404
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  updatePrices(symbol: string): Promise<void> {
    let url_ = this.baseUrl + '/api/assets/{symbol}/prices/update';
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace('{symbol}', encodeURIComponent('' + symbol));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdatePrices(_response);
    });
  }

  protected processUpdatePrices(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  calculateFeatures(symbol: string): Promise<void> {
    let url_ = this.baseUrl + '/api/assets/{symbol}/features/calculate';
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace('{symbol}', encodeURIComponent('' + symbol));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCalculateFeatures(_response);
    });
  }

  protected processCalculateFeatures(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class OrdersClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? 'https://localhost:32776';
  }

  query(
    symbol: string | null | undefined,
    start: Date | undefined,
    end: Date | undefined
  ): Promise<OrderResponse[]> {
    let url_ = this.baseUrl + '/api/orders?';
    if (symbol !== undefined && symbol !== null)
      url_ += 'symbol=' + encodeURIComponent('' + symbol) + '&';
    if (start === null)
      throw new Error("The parameter 'start' cannot be null.");
    else if (start !== undefined)
      url_ +=
        'start=' +
        encodeURIComponent(start ? '' + start.toISOString() : '') +
        '&';
    if (end === null) throw new Error("The parameter 'end' cannot be null.");
    else if (end !== undefined)
      url_ +=
        'end=' + encodeURIComponent(end ? '' + end.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processQuery(_response);
    });
  }

  protected processQuery(response: Response): Promise<OrderResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(OrderResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<OrderResponse[]>(null as any);
  }

  cancel(id: number): Promise<void> {
    let url_ = this.baseUrl + '/api/orders/cancel/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCancel(_response);
    });
  }

  protected processCancel(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  buy(request: BuyRequest): Promise<void> {
    let url_ = this.baseUrl + '/api/orders/buy';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(request);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processBuy(_response);
    });
  }

  protected processBuy(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  sell(request: SellRequest): Promise<void> {
    let url_ = this.baseUrl + '/api/orders/sell';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(request);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processSell(_response);
    });
  }

  protected processSell(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class PricesClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? 'https://localhost:32776';
  }

  getHourLatest(): Promise<PriceHourResponse[]> {
    let url_ = this.baseUrl + '/api/prices/hour/latest';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetHourLatest(_response);
    });
  }

  protected processGetHourLatest(
    response: Response
  ): Promise<PriceHourResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(PriceHourResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<PriceHourResponse[]>(null as any);
  }

  queryHour(
    symbol: string | undefined,
    start: Date | undefined,
    end: Date | undefined
  ): Promise<PriceHourResponse[]> {
    let url_ = this.baseUrl + '/api/prices/hour?';
    if (symbol === null)
      throw new Error("The parameter 'symbol' cannot be null.");
    else if (symbol !== undefined)
      url_ += 'symbol=' + encodeURIComponent('' + symbol) + '&';
    if (start === null)
      throw new Error("The parameter 'start' cannot be null.");
    else if (start !== undefined)
      url_ +=
        'start=' +
        encodeURIComponent(start ? '' + start.toISOString() : '') +
        '&';
    if (end === null) throw new Error("The parameter 'end' cannot be null.");
    else if (end !== undefined)
      url_ +=
        'end=' + encodeURIComponent(end ? '' + end.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processQueryHour(_response);
    });
  }

  protected processQueryHour(response: Response): Promise<PriceHourResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(PriceHourResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<PriceHourResponse[]>(null as any);
  }
}

export class AssetResponse implements IAssetResponse {
  symbol?: string;
  followed?: boolean;
  trade?: boolean;
  available?: number;
  total?: number;
  valueLow?: number;
  valueHigh?: number;
  valueAvg?: number;
  valueMA24?: number;
  valueMA24Upper?: number;
  valueMA24Lower?: number;
  latestPurchasePrice?: number | undefined;
  ma?: SimpleMovingAverage;
  high?: number;
  low?: number;

  constructor(data?: IAssetResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.symbol = _data['symbol'];
      this.followed = _data['followed'];
      this.trade = _data['trade'];
      this.available = _data['available'];
      this.total = _data['total'];
      this.valueLow = _data['valueLow'];
      this.valueHigh = _data['valueHigh'];
      this.valueAvg = _data['valueAvg'];
      this.valueMA24 = _data['valueMA24'];
      this.valueMA24Upper = _data['valueMA24Upper'];
      this.valueMA24Lower = _data['valueMA24Lower'];
      this.latestPurchasePrice = _data['latestPurchasePrice'];
      this.ma = _data['ma']
        ? SimpleMovingAverage.fromJS(_data['ma'])
        : <any>undefined;
      this.high = _data['high'];
      this.low = _data['low'];
    }
  }

  static fromJS(data: any): AssetResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AssetResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['symbol'] = this.symbol;
    data['followed'] = this.followed;
    data['trade'] = this.trade;
    data['available'] = this.available;
    data['total'] = this.total;
    data['valueLow'] = this.valueLow;
    data['valueHigh'] = this.valueHigh;
    data['valueAvg'] = this.valueAvg;
    data['valueMA24'] = this.valueMA24;
    data['valueMA24Upper'] = this.valueMA24Upper;
    data['valueMA24Lower'] = this.valueMA24Lower;
    data['latestPurchasePrice'] = this.latestPurchasePrice;
    data['ma'] = this.ma ? this.ma.toJSON() : <any>undefined;
    data['high'] = this.high;
    data['low'] = this.low;
    return data;
  }
}

export interface IAssetResponse {
  symbol?: string;
  followed?: boolean;
  trade?: boolean;
  available?: number;
  total?: number;
  valueLow?: number;
  valueHigh?: number;
  valueAvg?: number;
  valueMA24?: number;
  valueMA24Upper?: number;
  valueMA24Lower?: number;
  latestPurchasePrice?: number | undefined;
  ma?: SimpleMovingAverage;
  high?: number;
  low?: number;
}

export class SimpleMovingAverage implements ISimpleMovingAverage {
  sma?: number | undefined;
  mad?: number | undefined;
  mse?: number | undefined;
  mape?: number | undefined;

  constructor(data?: ISimpleMovingAverage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sma = _data['sma'];
      this.mad = _data['mad'];
      this.mse = _data['mse'];
      this.mape = _data['mape'];
    }
  }

  static fromJS(data: any): SimpleMovingAverage {
    data = typeof data === 'object' ? data : {};
    let result = new SimpleMovingAverage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sma'] = this.sma;
    data['mad'] = this.mad;
    data['mse'] = this.mse;
    data['mape'] = this.mape;
    return data;
  }
}

export interface ISimpleMovingAverage {
  sma?: number | undefined;
  mad?: number | undefined;
  mse?: number | undefined;
  mape?: number | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class OrderResponse implements IOrderResponse {
  id?: number;
  binanceId?: number;
  created?: Date;
  updated?: Date;
  status?: OrderStatus;
  side?: string;
  symbol?: string;
  price?: number;
  quantity?: number;
  executedQuantity?: number | undefined;
  quoteQuantity?: number | undefined;
  averageFillPrice?: number | undefined;
  commission?: number | undefined;
  quantityRemaining?: number | undefined;
  profit?: number | undefined;

  constructor(data?: IOrderResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.binanceId = _data['binanceId'];
      this.created = _data['created']
        ? new Date(_data['created'].toString())
        : <any>undefined;
      this.updated = _data['updated']
        ? new Date(_data['updated'].toString())
        : <any>undefined;
      this.status = _data['status'];
      this.side = _data['side'];
      this.symbol = _data['symbol'];
      this.price = _data['price'];
      this.quantity = _data['quantity'];
      this.executedQuantity = _data['executedQuantity'];
      this.quoteQuantity = _data['quoteQuantity'];
      this.averageFillPrice = _data['averageFillPrice'];
      this.commission = _data['commission'];
      this.quantityRemaining = _data['quantityRemaining'];
      this.profit = _data['profit'];
    }
  }

  static fromJS(data: any): OrderResponse {
    data = typeof data === 'object' ? data : {};
    let result = new OrderResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['binanceId'] = this.binanceId;
    data['created'] = this.created
      ? this.created.toISOString()
      : <any>undefined;
    data['updated'] = this.updated
      ? this.updated.toISOString()
      : <any>undefined;
    data['status'] = this.status;
    data['side'] = this.side;
    data['symbol'] = this.symbol;
    data['price'] = this.price;
    data['quantity'] = this.quantity;
    data['executedQuantity'] = this.executedQuantity;
    data['quoteQuantity'] = this.quoteQuantity;
    data['averageFillPrice'] = this.averageFillPrice;
    data['commission'] = this.commission;
    data['quantityRemaining'] = this.quantityRemaining;
    data['profit'] = this.profit;
    return data;
  }
}

export interface IOrderResponse {
  id?: number;
  binanceId?: number;
  created?: Date;
  updated?: Date;
  status?: OrderStatus;
  side?: string;
  symbol?: string;
  price?: number;
  quantity?: number;
  executedQuantity?: number | undefined;
  quoteQuantity?: number | undefined;
  averageFillPrice?: number | undefined;
  commission?: number | undefined;
  quantityRemaining?: number | undefined;
  profit?: number | undefined;
}

export enum OrderStatus {
  New = 'New',
  PartiallyFilled = 'PartiallyFilled',
  Filled = 'Filled',
  Canceled = 'Canceled',
  PendingCancel = 'PendingCancel',
  Rejected = 'Rejected',
  Expired = 'Expired',
  Insurance = 'Insurance',
  Adl = 'Adl',
  ExpiredInMatch = 'ExpiredInMatch',
}

export class BuyRequest implements IBuyRequest {
  symbol?: string;
  type?: BuyType;
  usdt?: number;

  constructor(data?: IBuyRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.symbol = _data['symbol'];
      this.type = _data['type'];
      this.usdt = _data['usdt'];
    }
  }

  static fromJS(data: any): BuyRequest {
    data = typeof data === 'object' ? data : {};
    let result = new BuyRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['symbol'] = this.symbol;
    data['type'] = this.type;
    data['usdt'] = this.usdt;
    return data;
  }
}

export interface IBuyRequest {
  symbol?: string;
  type?: BuyType;
  usdt?: number;
}

export enum BuyType {
  Low = 'Low',
  MA24Std = 'MA24Std',
}

export class SellRequest implements ISellRequest {
  symbol?: string;
  type?: SellType;

  constructor(data?: ISellRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.symbol = _data['symbol'];
      this.type = _data['type'];
    }
  }

  static fromJS(data: any): SellRequest {
    data = typeof data === 'object' ? data : {};
    let result = new SellRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['symbol'] = this.symbol;
    data['type'] = this.type;
    return data;
  }
}

export interface ISellRequest {
  symbol?: string;
  type?: SellType;
}

export enum SellType {
  High = 'High',
  MA24Std = 'MA24Std',
  DefaultProfit = 'DefaultProfit',
}

export class Price implements IPrice {
  id?: number;
  cryptoId?: number;
  timeOpen?: Date;
  open?: number;
  high?: number;
  low?: number;
  close?: number;
  volume?: number;
  quoteVolume?: number;
  trades?: number | undefined;
  buyVolume?: number;
  buyQuoteVolume?: number;
  marketCap?: number;
  avg?: Average;
  proportion?: Proportion;
  length?: Length;
  cycles?: PriceCycles | undefined;
  ma?: PriceMovingAverages | undefined;
  momentum?: PriceMomentums;
  otherIndicators?: PriceOtherIndicators | undefined;
  peak?: PricePeak | undefined;
  return?: PriceReturn | undefined;
  trend?: PriceTrends | undefined;
  volatility?: PriceVolatilities;
  volumes?: PriceVolumes | undefined;

  constructor(data?: IPrice) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.cryptoId = _data['cryptoId'];
      this.timeOpen = _data['timeOpen']
        ? new Date(_data['timeOpen'].toString())
        : <any>undefined;
      this.open = _data['open'];
      this.high = _data['high'];
      this.low = _data['low'];
      this.close = _data['close'];
      this.volume = _data['volume'];
      this.quoteVolume = _data['quoteVolume'];
      this.trades = _data['trades'];
      this.buyVolume = _data['buyVolume'];
      this.buyQuoteVolume = _data['buyQuoteVolume'];
      this.marketCap = _data['marketCap'];
      this.avg = _data['avg'] ? Average.fromJS(_data['avg']) : <any>undefined;
      this.proportion = _data['proportion']
        ? Proportion.fromJS(_data['proportion'])
        : <any>undefined;
      this.length = _data['length']
        ? Length.fromJS(_data['length'])
        : <any>undefined;
      this.cycles = _data['cycles']
        ? PriceCycles.fromJS(_data['cycles'])
        : <any>undefined;
      this.ma = _data['ma']
        ? PriceMovingAverages.fromJS(_data['ma'])
        : <any>undefined;
      this.momentum = _data['momentum']
        ? PriceMomentums.fromJS(_data['momentum'])
        : <any>undefined;
      this.otherIndicators = _data['otherIndicators']
        ? PriceOtherIndicators.fromJS(_data['otherIndicators'])
        : <any>undefined;
      this.peak = _data['peak']
        ? PricePeak.fromJS(_data['peak'])
        : <any>undefined;
      this.return = _data['return']
        ? PriceReturn.fromJS(_data['return'])
        : <any>undefined;
      this.trend = _data['trend']
        ? PriceTrends.fromJS(_data['trend'])
        : <any>undefined;
      this.volatility = _data['volatility']
        ? PriceVolatilities.fromJS(_data['volatility'])
        : <any>undefined;
      this.volumes = _data['volumes']
        ? PriceVolumes.fromJS(_data['volumes'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): Price {
    data = typeof data === 'object' ? data : {};
    let result = new Price();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cryptoId'] = this.cryptoId;
    data['timeOpen'] = this.timeOpen
      ? this.timeOpen.toISOString()
      : <any>undefined;
    data['open'] = this.open;
    data['high'] = this.high;
    data['low'] = this.low;
    data['close'] = this.close;
    data['volume'] = this.volume;
    data['quoteVolume'] = this.quoteVolume;
    data['trades'] = this.trades;
    data['buyVolume'] = this.buyVolume;
    data['buyQuoteVolume'] = this.buyQuoteVolume;
    data['marketCap'] = this.marketCap;
    data['avg'] = this.avg ? this.avg.toJSON() : <any>undefined;
    data['proportion'] = this.proportion
      ? this.proportion.toJSON()
      : <any>undefined;
    data['length'] = this.length ? this.length.toJSON() : <any>undefined;
    data['cycles'] = this.cycles ? this.cycles.toJSON() : <any>undefined;
    data['ma'] = this.ma ? this.ma.toJSON() : <any>undefined;
    data['momentum'] = this.momentum ? this.momentum.toJSON() : <any>undefined;
    data['otherIndicators'] = this.otherIndicators
      ? this.otherIndicators.toJSON()
      : <any>undefined;
    data['peak'] = this.peak ? this.peak.toJSON() : <any>undefined;
    data['return'] = this.return ? this.return.toJSON() : <any>undefined;
    data['trend'] = this.trend ? this.trend.toJSON() : <any>undefined;
    data['volatility'] = this.volatility
      ? this.volatility.toJSON()
      : <any>undefined;
    data['volumes'] = this.volumes ? this.volumes.toJSON() : <any>undefined;
    return data;
  }
}

export interface IPrice {
  id?: number;
  cryptoId?: number;
  timeOpen?: Date;
  open?: number;
  high?: number;
  low?: number;
  close?: number;
  volume?: number;
  quoteVolume?: number;
  trades?: number | undefined;
  buyVolume?: number;
  buyQuoteVolume?: number;
  marketCap?: number;
  avg?: Average;
  proportion?: Proportion;
  length?: Length;
  cycles?: PriceCycles | undefined;
  ma?: PriceMovingAverages | undefined;
  momentum?: PriceMomentums;
  otherIndicators?: PriceOtherIndicators | undefined;
  peak?: PricePeak | undefined;
  return?: PriceReturn | undefined;
  trend?: PriceTrends | undefined;
  volatility?: PriceVolatilities;
  volumes?: PriceVolumes | undefined;
}

export abstract class PriceResponse extends Price implements IPriceResponse {
  symbol?: string;
  predictionHigh?: number | undefined;
  predictionLow?: number | undefined;

  constructor(data?: IPriceResponse) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.symbol = _data['symbol'];
      this.predictionHigh = _data['predictionHigh'];
      this.predictionLow = _data['predictionLow'];
    }
  }

  static fromJS(data: any): PriceResponse {
    data = typeof data === 'object' ? data : {};
    throw new Error(
      "The abstract class 'PriceResponse' cannot be instantiated."
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['symbol'] = this.symbol;
    data['predictionHigh'] = this.predictionHigh;
    data['predictionLow'] = this.predictionLow;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceResponse extends IPrice {
  symbol?: string;
  predictionHigh?: number | undefined;
  predictionLow?: number | undefined;
}

export class PriceHourResponse
  extends PriceResponse
  implements IPriceHourResponse
{
  constructor(data?: IPriceHourResponse) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): PriceHourResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PriceHourResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export interface IPriceHourResponse extends IPriceResponse {}

export class Average implements IAverage {
  ohlc?: number;
  hlc?: number;
  hl?: number;
  oc?: number;

  constructor(data?: IAverage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ohlc = _data['ohlc'];
      this.hlc = _data['hlc'];
      this.hl = _data['hl'];
      this.oc = _data['oc'];
    }
  }

  static fromJS(data: any): Average {
    data = typeof data === 'object' ? data : {};
    let result = new Average();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ohlc'] = this.ohlc;
    data['hlc'] = this.hlc;
    data['hl'] = this.hl;
    data['oc'] = this.oc;
    return data;
  }
}

export interface IAverage {
  ohlc?: number;
  hlc?: number;
  hl?: number;
  oc?: number;
}

export class Proportion implements IProportion {
  upper?: number;
  body?: number;
  lower?: number;

  constructor(data?: IProportion) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.body = _data['body'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): Proportion {
    data = typeof data === 'object' ? data : {};
    let result = new Proportion();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['body'] = this.body;
    data['lower'] = this.lower;
    return data;
  }
}

export interface IProportion {
  upper?: number;
  body?: number;
  lower?: number;
}

export class Length implements ILength {
  candle?: number;
  upper?: number;
  body?: number;
  lower?: number;

  constructor(data?: ILength) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.candle = _data['candle'];
      this.upper = _data['upper'];
      this.body = _data['body'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): Length {
    data = typeof data === 'object' ? data : {};
    let result = new Length();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['candle'] = this.candle;
    data['upper'] = this.upper;
    data['body'] = this.body;
    data['lower'] = this.lower;
    return data;
  }
}

export interface ILength {
  candle?: number;
  upper?: number;
  body?: number;
  lower?: number;
}

export abstract class FeatureContainer implements IFeatureContainer {
  constructor(data?: IFeatureContainer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {}

  static fromJS(data: any): FeatureContainer {
    data = typeof data === 'object' ? data : {};
    throw new Error(
      "The abstract class 'FeatureContainer' cannot be instantiated."
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    return data;
  }
}

export interface IFeatureContainer {}

export class PriceCycles extends FeatureContainer implements IPriceCycles {
  ehlersAdaptiveCyberCycle?: EhlersAdaptiveCyberCycle;
  ehlersCombFilterSpectralEstimate?: number | undefined;
  ehlersCyberCycle?: number | undefined;
  ehlersCycleAmplitude?: number | undefined;
  ehlersCycleBandPassFilter?: number | undefined;
  ehlersDualDifferentiatorDominantCycle?: number | undefined;
  ehlersEvenBetterSineWaveIndicator?: number | undefined;
  ehlersFourierSeriesAnalysis?: EhlersFourierSeriesAnalysis;
  ehlersHomodyneDominantCycle?: number | undefined;
  ehlersInstantaneousPhaseIndicator?: number | undefined;
  ehlersPhaseAccumulationDominantCycle?: number | undefined;
  ehlersSimpleCycleIndicator?: number | undefined;
  ehlersSineWaveIndicatorV1?: EhlersSineWaveIndicator;
  ehlersSineWaveIndicatorV2?: EhlersSineWaveIndicator;
  ehlersSpectrumDerivedFilterBank?: number | undefined;
  ehlersSquelchIndicator?: number | undefined;
  ehlersStochasticCyberCycle?: EhlersStochasticCyberCycle;
  ehlersZeroCrossingsDominantCycle?: number | undefined;
  groverLlorensCycleOscillator?: number | undefined;
  hurstCycleChannel?: HurstCycleChannel;
  simpleCycle?: number | undefined;

  constructor(data?: IPriceCycles) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.ehlersAdaptiveCyberCycle = _data['ehlersAdaptiveCyberCycle']
        ? EhlersAdaptiveCyberCycle.fromJS(_data['ehlersAdaptiveCyberCycle'])
        : <any>undefined;
      this.ehlersCombFilterSpectralEstimate =
        _data['ehlersCombFilterSpectralEstimate'];
      this.ehlersCyberCycle = _data['ehlersCyberCycle'];
      this.ehlersCycleAmplitude = _data['ehlersCycleAmplitude'];
      this.ehlersCycleBandPassFilter = _data['ehlersCycleBandPassFilter'];
      this.ehlersDualDifferentiatorDominantCycle =
        _data['ehlersDualDifferentiatorDominantCycle'];
      this.ehlersEvenBetterSineWaveIndicator =
        _data['ehlersEvenBetterSineWaveIndicator'];
      this.ehlersFourierSeriesAnalysis = _data['ehlersFourierSeriesAnalysis']
        ? EhlersFourierSeriesAnalysis.fromJS(
            _data['ehlersFourierSeriesAnalysis']
          )
        : <any>undefined;
      this.ehlersHomodyneDominantCycle = _data['ehlersHomodyneDominantCycle'];
      this.ehlersInstantaneousPhaseIndicator =
        _data['ehlersInstantaneousPhaseIndicator'];
      this.ehlersPhaseAccumulationDominantCycle =
        _data['ehlersPhaseAccumulationDominantCycle'];
      this.ehlersSimpleCycleIndicator = _data['ehlersSimpleCycleIndicator'];
      this.ehlersSineWaveIndicatorV1 = _data['ehlersSineWaveIndicatorV1']
        ? EhlersSineWaveIndicator.fromJS(_data['ehlersSineWaveIndicatorV1'])
        : <any>undefined;
      this.ehlersSineWaveIndicatorV2 = _data['ehlersSineWaveIndicatorV2']
        ? EhlersSineWaveIndicator.fromJS(_data['ehlersSineWaveIndicatorV2'])
        : <any>undefined;
      this.ehlersSpectrumDerivedFilterBank =
        _data['ehlersSpectrumDerivedFilterBank'];
      this.ehlersSquelchIndicator = _data['ehlersSquelchIndicator'];
      this.ehlersStochasticCyberCycle = _data['ehlersStochasticCyberCycle']
        ? EhlersStochasticCyberCycle.fromJS(_data['ehlersStochasticCyberCycle'])
        : <any>undefined;
      this.ehlersZeroCrossingsDominantCycle =
        _data['ehlersZeroCrossingsDominantCycle'];
      this.groverLlorensCycleOscillator = _data['groverLlorensCycleOscillator'];
      this.hurstCycleChannel = _data['hurstCycleChannel']
        ? HurstCycleChannel.fromJS(_data['hurstCycleChannel'])
        : <any>undefined;
      this.simpleCycle = _data['simpleCycle'];
    }
  }

  static fromJS(data: any): PriceCycles {
    data = typeof data === 'object' ? data : {};
    let result = new PriceCycles();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ehlersAdaptiveCyberCycle'] = this.ehlersAdaptiveCyberCycle
      ? this.ehlersAdaptiveCyberCycle.toJSON()
      : <any>undefined;
    data['ehlersCombFilterSpectralEstimate'] =
      this.ehlersCombFilterSpectralEstimate;
    data['ehlersCyberCycle'] = this.ehlersCyberCycle;
    data['ehlersCycleAmplitude'] = this.ehlersCycleAmplitude;
    data['ehlersCycleBandPassFilter'] = this.ehlersCycleBandPassFilter;
    data['ehlersDualDifferentiatorDominantCycle'] =
      this.ehlersDualDifferentiatorDominantCycle;
    data['ehlersEvenBetterSineWaveIndicator'] =
      this.ehlersEvenBetterSineWaveIndicator;
    data['ehlersFourierSeriesAnalysis'] = this.ehlersFourierSeriesAnalysis
      ? this.ehlersFourierSeriesAnalysis.toJSON()
      : <any>undefined;
    data['ehlersHomodyneDominantCycle'] = this.ehlersHomodyneDominantCycle;
    data['ehlersInstantaneousPhaseIndicator'] =
      this.ehlersInstantaneousPhaseIndicator;
    data['ehlersPhaseAccumulationDominantCycle'] =
      this.ehlersPhaseAccumulationDominantCycle;
    data['ehlersSimpleCycleIndicator'] = this.ehlersSimpleCycleIndicator;
    data['ehlersSineWaveIndicatorV1'] = this.ehlersSineWaveIndicatorV1
      ? this.ehlersSineWaveIndicatorV1.toJSON()
      : <any>undefined;
    data['ehlersSineWaveIndicatorV2'] = this.ehlersSineWaveIndicatorV2
      ? this.ehlersSineWaveIndicatorV2.toJSON()
      : <any>undefined;
    data['ehlersSpectrumDerivedFilterBank'] =
      this.ehlersSpectrumDerivedFilterBank;
    data['ehlersSquelchIndicator'] = this.ehlersSquelchIndicator;
    data['ehlersStochasticCyberCycle'] = this.ehlersStochasticCyberCycle
      ? this.ehlersStochasticCyberCycle.toJSON()
      : <any>undefined;
    data['ehlersZeroCrossingsDominantCycle'] =
      this.ehlersZeroCrossingsDominantCycle;
    data['groverLlorensCycleOscillator'] = this.groverLlorensCycleOscillator;
    data['hurstCycleChannel'] = this.hurstCycleChannel
      ? this.hurstCycleChannel.toJSON()
      : <any>undefined;
    data['simpleCycle'] = this.simpleCycle;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceCycles extends IFeatureContainer {
  ehlersAdaptiveCyberCycle?: EhlersAdaptiveCyberCycle;
  ehlersCombFilterSpectralEstimate?: number | undefined;
  ehlersCyberCycle?: number | undefined;
  ehlersCycleAmplitude?: number | undefined;
  ehlersCycleBandPassFilter?: number | undefined;
  ehlersDualDifferentiatorDominantCycle?: number | undefined;
  ehlersEvenBetterSineWaveIndicator?: number | undefined;
  ehlersFourierSeriesAnalysis?: EhlersFourierSeriesAnalysis;
  ehlersHomodyneDominantCycle?: number | undefined;
  ehlersInstantaneousPhaseIndicator?: number | undefined;
  ehlersPhaseAccumulationDominantCycle?: number | undefined;
  ehlersSimpleCycleIndicator?: number | undefined;
  ehlersSineWaveIndicatorV1?: EhlersSineWaveIndicator;
  ehlersSineWaveIndicatorV2?: EhlersSineWaveIndicator;
  ehlersSpectrumDerivedFilterBank?: number | undefined;
  ehlersSquelchIndicator?: number | undefined;
  ehlersStochasticCyberCycle?: EhlersStochasticCyberCycle;
  ehlersZeroCrossingsDominantCycle?: number | undefined;
  groverLlorensCycleOscillator?: number | undefined;
  hurstCycleChannel?: HurstCycleChannel;
  simpleCycle?: number | undefined;
}

export class EhlersAdaptiveCyberCycle implements IEhlersAdaptiveCyberCycle {
  cycle?: number | undefined;
  period?: number | undefined;

  constructor(data?: IEhlersAdaptiveCyberCycle) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.cycle = _data['cycle'];
      this.period = _data['period'];
    }
  }

  static fromJS(data: any): EhlersAdaptiveCyberCycle {
    data = typeof data === 'object' ? data : {};
    let result = new EhlersAdaptiveCyberCycle();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['cycle'] = this.cycle;
    data['period'] = this.period;
    return data;
  }
}

export interface IEhlersAdaptiveCyberCycle {
  cycle?: number | undefined;
  period?: number | undefined;
}

export class EhlersFourierSeriesAnalysis
  implements IEhlersFourierSeriesAnalysis
{
  wave?: number | undefined;
  roc?: number | undefined;

  constructor(data?: IEhlersFourierSeriesAnalysis) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.wave = _data['wave'];
      this.roc = _data['roc'];
    }
  }

  static fromJS(data: any): EhlersFourierSeriesAnalysis {
    data = typeof data === 'object' ? data : {};
    let result = new EhlersFourierSeriesAnalysis();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['wave'] = this.wave;
    data['roc'] = this.roc;
    return data;
  }
}

export interface IEhlersFourierSeriesAnalysis {
  wave?: number | undefined;
  roc?: number | undefined;
}

export class EhlersSineWaveIndicator implements IEhlersSineWaveIndicator {
  sine?: number | undefined;
  leadSine?: number | undefined;

  constructor(data?: IEhlersSineWaveIndicator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sine = _data['sine'];
      this.leadSine = _data['leadSine'];
    }
  }

  static fromJS(data: any): EhlersSineWaveIndicator {
    data = typeof data === 'object' ? data : {};
    let result = new EhlersSineWaveIndicator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sine'] = this.sine;
    data['leadSine'] = this.leadSine;
    return data;
  }
}

export interface IEhlersSineWaveIndicator {
  sine?: number | undefined;
  leadSine?: number | undefined;
}

export class EhlersStochasticCyberCycle implements IEhlersStochasticCyberCycle {
  cycle?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IEhlersStochasticCyberCycle) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.cycle = _data['cycle'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): EhlersStochasticCyberCycle {
    data = typeof data === 'object' ? data : {};
    let result = new EhlersStochasticCyberCycle();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['cycle'] = this.cycle;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IEhlersStochasticCyberCycle {
  cycle?: number | undefined;
  signal?: number | undefined;
}

export class HurstCycleChannel implements IHurstCycleChannel {
  fastUpperBand?: number | undefined;
  slowUpperBand?: number | undefined;
  fastMiddleBand?: number | undefined;
  slowMiddleBand?: number | undefined;
  fastLowerBand?: number | undefined;
  slowLowerBand?: number | undefined;
  oMed?: number | undefined;
  oShort?: number | undefined;

  constructor(data?: IHurstCycleChannel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.fastUpperBand = _data['fastUpperBand'];
      this.slowUpperBand = _data['slowUpperBand'];
      this.fastMiddleBand = _data['fastMiddleBand'];
      this.slowMiddleBand = _data['slowMiddleBand'];
      this.fastLowerBand = _data['fastLowerBand'];
      this.slowLowerBand = _data['slowLowerBand'];
      this.oMed = _data['oMed'];
      this.oShort = _data['oShort'];
    }
  }

  static fromJS(data: any): HurstCycleChannel {
    data = typeof data === 'object' ? data : {};
    let result = new HurstCycleChannel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fastUpperBand'] = this.fastUpperBand;
    data['slowUpperBand'] = this.slowUpperBand;
    data['fastMiddleBand'] = this.fastMiddleBand;
    data['slowMiddleBand'] = this.slowMiddleBand;
    data['fastLowerBand'] = this.fastLowerBand;
    data['slowLowerBand'] = this.slowLowerBand;
    data['oMed'] = this.oMed;
    data['oShort'] = this.oShort;
    return data;
  }
}

export interface IHurstCycleChannel {
  fastUpperBand?: number | undefined;
  slowUpperBand?: number | undefined;
  fastMiddleBand?: number | undefined;
  slowMiddleBand?: number | undefined;
  fastLowerBand?: number | undefined;
  slowLowerBand?: number | undefined;
  oMed?: number | undefined;
  oShort?: number | undefined;
}

export class PriceMovingAverages
  extends FeatureContainer
  implements IPriceMovingAverages
{
  alma6?: number | undefined;
  alma12?: number | undefined;
  alma24?: number | undefined;
  alma168?: number | undefined;
  dema6?: number | undefined;
  dema12?: number | undefined;
  dema24?: number | undefined;
  dema168?: number | undefined;
  ema6?: number | undefined;
  ema12?: number | undefined;
  ema24?: number | undefined;
  ema168?: number | undefined;
  epma6?: number | undefined;
  epma12?: number | undefined;
  epma24?: number | undefined;
  epma168?: number | undefined;
  hma6?: number | undefined;
  hma12?: number | undefined;
  hma24?: number | undefined;
  hma168?: number | undefined;
  kama?: KaufmansAdaptiveMovingAverage;
  mama?: MesaAdaptiveMovingAverage;
  sma12?: SimpleMovingAverage;
  sma24?: SimpleMovingAverage;
  sma168?: SimpleMovingAverage;
  smma6?: number | undefined;
  smma12?: number | undefined;
  smma24?: number | undefined;
  smma168?: number | undefined;
  t3_6?: number | undefined;
  t3_12?: number | undefined;
  t3_24?: number | undefined;
  t3_168?: number | undefined;
  tema6?: number | undefined;
  tema12?: number | undefined;
  tema24?: number | undefined;
  tema168?: number | undefined;
  wma6?: number | undefined;
  wma12?: number | undefined;
  wma24?: number | undefined;
  wma168?: number | undefined;
  vwma6?: number | undefined;
  vwma12?: number | undefined;
  vwma24?: number | undefined;
  vwma168?: number | undefined;

  constructor(data?: IPriceMovingAverages) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.alma6 = _data['alma6'];
      this.alma12 = _data['alma12'];
      this.alma24 = _data['alma24'];
      this.alma168 = _data['alma168'];
      this.dema6 = _data['dema6'];
      this.dema12 = _data['dema12'];
      this.dema24 = _data['dema24'];
      this.dema168 = _data['dema168'];
      this.ema6 = _data['ema6'];
      this.ema12 = _data['ema12'];
      this.ema24 = _data['ema24'];
      this.ema168 = _data['ema168'];
      this.epma6 = _data['epma6'];
      this.epma12 = _data['epma12'];
      this.epma24 = _data['epma24'];
      this.epma168 = _data['epma168'];
      this.hma6 = _data['hma6'];
      this.hma12 = _data['hma12'];
      this.hma24 = _data['hma24'];
      this.hma168 = _data['hma168'];
      this.kama = _data['kama']
        ? KaufmansAdaptiveMovingAverage.fromJS(_data['kama'])
        : <any>undefined;
      this.mama = _data['mama']
        ? MesaAdaptiveMovingAverage.fromJS(_data['mama'])
        : <any>undefined;
      this.sma12 = _data['sma12']
        ? SimpleMovingAverage.fromJS(_data['sma12'])
        : <any>undefined;
      this.sma24 = _data['sma24']
        ? SimpleMovingAverage.fromJS(_data['sma24'])
        : <any>undefined;
      this.sma168 = _data['sma168']
        ? SimpleMovingAverage.fromJS(_data['sma168'])
        : <any>undefined;
      this.smma6 = _data['smma6'];
      this.smma12 = _data['smma12'];
      this.smma24 = _data['smma24'];
      this.smma168 = _data['smma168'];
      this.t3_6 = _data['t3_6'];
      this.t3_12 = _data['t3_12'];
      this.t3_24 = _data['t3_24'];
      this.t3_168 = _data['t3_168'];
      this.tema6 = _data['tema6'];
      this.tema12 = _data['tema12'];
      this.tema24 = _data['tema24'];
      this.tema168 = _data['tema168'];
      this.wma6 = _data['wma6'];
      this.wma12 = _data['wma12'];
      this.wma24 = _data['wma24'];
      this.wma168 = _data['wma168'];
      this.vwma6 = _data['vwma6'];
      this.vwma12 = _data['vwma12'];
      this.vwma24 = _data['vwma24'];
      this.vwma168 = _data['vwma168'];
    }
  }

  static fromJS(data: any): PriceMovingAverages {
    data = typeof data === 'object' ? data : {};
    let result = new PriceMovingAverages();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['alma6'] = this.alma6;
    data['alma12'] = this.alma12;
    data['alma24'] = this.alma24;
    data['alma168'] = this.alma168;
    data['dema6'] = this.dema6;
    data['dema12'] = this.dema12;
    data['dema24'] = this.dema24;
    data['dema168'] = this.dema168;
    data['ema6'] = this.ema6;
    data['ema12'] = this.ema12;
    data['ema24'] = this.ema24;
    data['ema168'] = this.ema168;
    data['epma6'] = this.epma6;
    data['epma12'] = this.epma12;
    data['epma24'] = this.epma24;
    data['epma168'] = this.epma168;
    data['hma6'] = this.hma6;
    data['hma12'] = this.hma12;
    data['hma24'] = this.hma24;
    data['hma168'] = this.hma168;
    data['kama'] = this.kama ? this.kama.toJSON() : <any>undefined;
    data['mama'] = this.mama ? this.mama.toJSON() : <any>undefined;
    data['sma12'] = this.sma12 ? this.sma12.toJSON() : <any>undefined;
    data['sma24'] = this.sma24 ? this.sma24.toJSON() : <any>undefined;
    data['sma168'] = this.sma168 ? this.sma168.toJSON() : <any>undefined;
    data['smma6'] = this.smma6;
    data['smma12'] = this.smma12;
    data['smma24'] = this.smma24;
    data['smma168'] = this.smma168;
    data['t3_6'] = this.t3_6;
    data['t3_12'] = this.t3_12;
    data['t3_24'] = this.t3_24;
    data['t3_168'] = this.t3_168;
    data['tema6'] = this.tema6;
    data['tema12'] = this.tema12;
    data['tema24'] = this.tema24;
    data['tema168'] = this.tema168;
    data['wma6'] = this.wma6;
    data['wma12'] = this.wma12;
    data['wma24'] = this.wma24;
    data['wma168'] = this.wma168;
    data['vwma6'] = this.vwma6;
    data['vwma12'] = this.vwma12;
    data['vwma24'] = this.vwma24;
    data['vwma168'] = this.vwma168;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceMovingAverages extends IFeatureContainer {
  alma6?: number | undefined;
  alma12?: number | undefined;
  alma24?: number | undefined;
  alma168?: number | undefined;
  dema6?: number | undefined;
  dema12?: number | undefined;
  dema24?: number | undefined;
  dema168?: number | undefined;
  ema6?: number | undefined;
  ema12?: number | undefined;
  ema24?: number | undefined;
  ema168?: number | undefined;
  epma6?: number | undefined;
  epma12?: number | undefined;
  epma24?: number | undefined;
  epma168?: number | undefined;
  hma6?: number | undefined;
  hma12?: number | undefined;
  hma24?: number | undefined;
  hma168?: number | undefined;
  kama?: KaufmansAdaptiveMovingAverage;
  mama?: MesaAdaptiveMovingAverage;
  sma12?: SimpleMovingAverage;
  sma24?: SimpleMovingAverage;
  sma168?: SimpleMovingAverage;
  smma6?: number | undefined;
  smma12?: number | undefined;
  smma24?: number | undefined;
  smma168?: number | undefined;
  t3_6?: number | undefined;
  t3_12?: number | undefined;
  t3_24?: number | undefined;
  t3_168?: number | undefined;
  tema6?: number | undefined;
  tema12?: number | undefined;
  tema24?: number | undefined;
  tema168?: number | undefined;
  wma6?: number | undefined;
  wma12?: number | undefined;
  wma24?: number | undefined;
  wma168?: number | undefined;
  vwma6?: number | undefined;
  vwma12?: number | undefined;
  vwma24?: number | undefined;
  vwma168?: number | undefined;
}

export class KaufmansAdaptiveMovingAverage
  implements IKaufmansAdaptiveMovingAverage
{
  er?: number | undefined;
  kama?: number | undefined;

  constructor(data?: IKaufmansAdaptiveMovingAverage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.er = _data['er'];
      this.kama = _data['kama'];
    }
  }

  static fromJS(data: any): KaufmansAdaptiveMovingAverage {
    data = typeof data === 'object' ? data : {};
    let result = new KaufmansAdaptiveMovingAverage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['er'] = this.er;
    data['kama'] = this.kama;
    return data;
  }
}

export interface IKaufmansAdaptiveMovingAverage {
  er?: number | undefined;
  kama?: number | undefined;
}

export class MesaAdaptiveMovingAverage implements IMesaAdaptiveMovingAverage {
  mama?: number | undefined;
  fama?: number | undefined;

  constructor(data?: IMesaAdaptiveMovingAverage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.mama = _data['mama'];
      this.fama = _data['fama'];
    }
  }

  static fromJS(data: any): MesaAdaptiveMovingAverage {
    data = typeof data === 'object' ? data : {};
    let result = new MesaAdaptiveMovingAverage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['mama'] = this.mama;
    data['fama'] = this.fama;
    return data;
  }
}

export interface IMesaAdaptiveMovingAverage {
  mama?: number | undefined;
  fama?: number | undefined;
}

export class PriceMomentums
  extends FeatureContainer
  implements IPriceMomentums
{
  absolutePriceOscillator?: number | undefined;
  awesomeOscillator?: AwesomeOscillator;
  balanceOfPower?: number | undefined;
  chandeMomentumOscillator?: number | undefined;
  commodityChannelIndex?: number | undefined;
  commoditySelectionIndex?: CommoditySelectionIndex;
  connorsRSI?: ConnorsRSI;
  detrendedPriceOscillator?: DetrendedPriceOscillator;
  elderRayIndex?: ElderRayIndex;
  gatorOscillator?: GatorOscillator;
  macd?: MovingAverageConvergenceDivergence;
  onBalanceVolume?: OnBalanceVolume;
  percentagePriceOscillator?: PercentagePriceOscillator;
  priceMomentumOscillator?: PriceMomentumOscillator;
  rateOfChange?: RateOfChange;
  relativeStrengthIndex?: number | undefined;
  rocWithBands?: RocWithBands;
  schaffTrendCycle?: number | undefined;
  stochasticFastOscillator?: StochasticFastOscillator;
  stochasticMomentumIndex?: StochasticMomentumIndex;
  stochasticOscillator?: StochasticOscillator;
  stochasticRSI?: StochasticRSI;
  trix?: TripleEmaOscillator;
  trueStrengthIndex?: TrueStrengthIndex;
  ultimateOscillator?: number | undefined;
  williamsR?: number | undefined;

  constructor(data?: IPriceMomentums) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.absolutePriceOscillator = _data['absolutePriceOscillator'];
      this.awesomeOscillator = _data['awesomeOscillator']
        ? AwesomeOscillator.fromJS(_data['awesomeOscillator'])
        : <any>undefined;
      this.balanceOfPower = _data['balanceOfPower'];
      this.chandeMomentumOscillator = _data['chandeMomentumOscillator'];
      this.commodityChannelIndex = _data['commodityChannelIndex'];
      this.commoditySelectionIndex = _data['commoditySelectionIndex']
        ? CommoditySelectionIndex.fromJS(_data['commoditySelectionIndex'])
        : <any>undefined;
      this.connorsRSI = _data['connorsRSI']
        ? ConnorsRSI.fromJS(_data['connorsRSI'])
        : <any>undefined;
      this.detrendedPriceOscillator = _data['detrendedPriceOscillator']
        ? DetrendedPriceOscillator.fromJS(_data['detrendedPriceOscillator'])
        : <any>undefined;
      this.elderRayIndex = _data['elderRayIndex']
        ? ElderRayIndex.fromJS(_data['elderRayIndex'])
        : <any>undefined;
      this.gatorOscillator = _data['gatorOscillator']
        ? GatorOscillator.fromJS(_data['gatorOscillator'])
        : <any>undefined;
      this.macd = _data['macd']
        ? MovingAverageConvergenceDivergence.fromJS(_data['macd'])
        : <any>undefined;
      this.onBalanceVolume = _data['onBalanceVolume']
        ? OnBalanceVolume.fromJS(_data['onBalanceVolume'])
        : <any>undefined;
      this.percentagePriceOscillator = _data['percentagePriceOscillator']
        ? PercentagePriceOscillator.fromJS(_data['percentagePriceOscillator'])
        : <any>undefined;
      this.priceMomentumOscillator = _data['priceMomentumOscillator']
        ? PriceMomentumOscillator.fromJS(_data['priceMomentumOscillator'])
        : <any>undefined;
      this.rateOfChange = _data['rateOfChange']
        ? RateOfChange.fromJS(_data['rateOfChange'])
        : <any>undefined;
      this.relativeStrengthIndex = _data['relativeStrengthIndex'];
      this.rocWithBands = _data['rocWithBands']
        ? RocWithBands.fromJS(_data['rocWithBands'])
        : <any>undefined;
      this.schaffTrendCycle = _data['schaffTrendCycle'];
      this.stochasticFastOscillator = _data['stochasticFastOscillator']
        ? StochasticFastOscillator.fromJS(_data['stochasticFastOscillator'])
        : <any>undefined;
      this.stochasticMomentumIndex = _data['stochasticMomentumIndex']
        ? StochasticMomentumIndex.fromJS(_data['stochasticMomentumIndex'])
        : <any>undefined;
      this.stochasticOscillator = _data['stochasticOscillator']
        ? StochasticOscillator.fromJS(_data['stochasticOscillator'])
        : <any>undefined;
      this.stochasticRSI = _data['stochasticRSI']
        ? StochasticRSI.fromJS(_data['stochasticRSI'])
        : <any>undefined;
      this.trix = _data['trix']
        ? TripleEmaOscillator.fromJS(_data['trix'])
        : <any>undefined;
      this.trueStrengthIndex = _data['trueStrengthIndex']
        ? TrueStrengthIndex.fromJS(_data['trueStrengthIndex'])
        : <any>undefined;
      this.ultimateOscillator = _data['ultimateOscillator'];
      this.williamsR = _data['williamsR'];
    }
  }

  static fromJS(data: any): PriceMomentums {
    data = typeof data === 'object' ? data : {};
    let result = new PriceMomentums();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['absolutePriceOscillator'] = this.absolutePriceOscillator;
    data['awesomeOscillator'] = this.awesomeOscillator
      ? this.awesomeOscillator.toJSON()
      : <any>undefined;
    data['balanceOfPower'] = this.balanceOfPower;
    data['chandeMomentumOscillator'] = this.chandeMomentumOscillator;
    data['commodityChannelIndex'] = this.commodityChannelIndex;
    data['commoditySelectionIndex'] = this.commoditySelectionIndex
      ? this.commoditySelectionIndex.toJSON()
      : <any>undefined;
    data['connorsRSI'] = this.connorsRSI
      ? this.connorsRSI.toJSON()
      : <any>undefined;
    data['detrendedPriceOscillator'] = this.detrendedPriceOscillator
      ? this.detrendedPriceOscillator.toJSON()
      : <any>undefined;
    data['elderRayIndex'] = this.elderRayIndex
      ? this.elderRayIndex.toJSON()
      : <any>undefined;
    data['gatorOscillator'] = this.gatorOscillator
      ? this.gatorOscillator.toJSON()
      : <any>undefined;
    data['macd'] = this.macd ? this.macd.toJSON() : <any>undefined;
    data['onBalanceVolume'] = this.onBalanceVolume
      ? this.onBalanceVolume.toJSON()
      : <any>undefined;
    data['percentagePriceOscillator'] = this.percentagePriceOscillator
      ? this.percentagePriceOscillator.toJSON()
      : <any>undefined;
    data['priceMomentumOscillator'] = this.priceMomentumOscillator
      ? this.priceMomentumOscillator.toJSON()
      : <any>undefined;
    data['rateOfChange'] = this.rateOfChange
      ? this.rateOfChange.toJSON()
      : <any>undefined;
    data['relativeStrengthIndex'] = this.relativeStrengthIndex;
    data['rocWithBands'] = this.rocWithBands
      ? this.rocWithBands.toJSON()
      : <any>undefined;
    data['schaffTrendCycle'] = this.schaffTrendCycle;
    data['stochasticFastOscillator'] = this.stochasticFastOscillator
      ? this.stochasticFastOscillator.toJSON()
      : <any>undefined;
    data['stochasticMomentumIndex'] = this.stochasticMomentumIndex
      ? this.stochasticMomentumIndex.toJSON()
      : <any>undefined;
    data['stochasticOscillator'] = this.stochasticOscillator
      ? this.stochasticOscillator.toJSON()
      : <any>undefined;
    data['stochasticRSI'] = this.stochasticRSI
      ? this.stochasticRSI.toJSON()
      : <any>undefined;
    data['trix'] = this.trix ? this.trix.toJSON() : <any>undefined;
    data['trueStrengthIndex'] = this.trueStrengthIndex
      ? this.trueStrengthIndex.toJSON()
      : <any>undefined;
    data['ultimateOscillator'] = this.ultimateOscillator;
    data['williamsR'] = this.williamsR;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceMomentums extends IFeatureContainer {
  absolutePriceOscillator?: number | undefined;
  awesomeOscillator?: AwesomeOscillator;
  balanceOfPower?: number | undefined;
  chandeMomentumOscillator?: number | undefined;
  commodityChannelIndex?: number | undefined;
  commoditySelectionIndex?: CommoditySelectionIndex;
  connorsRSI?: ConnorsRSI;
  detrendedPriceOscillator?: DetrendedPriceOscillator;
  elderRayIndex?: ElderRayIndex;
  gatorOscillator?: GatorOscillator;
  macd?: MovingAverageConvergenceDivergence;
  onBalanceVolume?: OnBalanceVolume;
  percentagePriceOscillator?: PercentagePriceOscillator;
  priceMomentumOscillator?: PriceMomentumOscillator;
  rateOfChange?: RateOfChange;
  relativeStrengthIndex?: number | undefined;
  rocWithBands?: RocWithBands;
  schaffTrendCycle?: number | undefined;
  stochasticFastOscillator?: StochasticFastOscillator;
  stochasticMomentumIndex?: StochasticMomentumIndex;
  stochasticOscillator?: StochasticOscillator;
  stochasticRSI?: StochasticRSI;
  trix?: TripleEmaOscillator;
  trueStrengthIndex?: TrueStrengthIndex;
  ultimateOscillator?: number | undefined;
  williamsR?: number | undefined;
}

export class AwesomeOscillator implements IAwesomeOscillator {
  oscillator?: number | undefined;
  normalized?: number | undefined;

  constructor(data?: IAwesomeOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.oscillator = _data['oscillator'];
      this.normalized = _data['normalized'];
    }
  }

  static fromJS(data: any): AwesomeOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new AwesomeOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['oscillator'] = this.oscillator;
    data['normalized'] = this.normalized;
    return data;
  }
}

export interface IAwesomeOscillator {
  oscillator?: number | undefined;
  normalized?: number | undefined;
}

export class CommoditySelectionIndex implements ICommoditySelectionIndex {
  csi?: number | undefined;
  signal?: number | undefined;

  constructor(data?: ICommoditySelectionIndex) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.csi = _data['csi'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): CommoditySelectionIndex {
    data = typeof data === 'object' ? data : {};
    let result = new CommoditySelectionIndex();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['csi'] = this.csi;
    data['signal'] = this.signal;
    return data;
  }
}

export interface ICommoditySelectionIndex {
  csi?: number | undefined;
  signal?: number | undefined;
}

export class ConnorsRSI implements IConnorsRSI {
  rsi?: number | undefined;
  rsiStreak?: number | undefined;
  percentRank?: number | undefined;
  connorsRsi?: number | undefined;

  constructor(data?: IConnorsRSI) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.rsi = _data['rsi'];
      this.rsiStreak = _data['rsiStreak'];
      this.percentRank = _data['percentRank'];
      this.connorsRsi = _data['connorsRsi'];
    }
  }

  static fromJS(data: any): ConnorsRSI {
    data = typeof data === 'object' ? data : {};
    let result = new ConnorsRSI();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['rsi'] = this.rsi;
    data['rsiStreak'] = this.rsiStreak;
    data['percentRank'] = this.percentRank;
    data['connorsRsi'] = this.connorsRsi;
    return data;
  }
}

export interface IConnorsRSI {
  rsi?: number | undefined;
  rsiStreak?: number | undefined;
  percentRank?: number | undefined;
  connorsRsi?: number | undefined;
}

export class DetrendedPriceOscillator implements IDetrendedPriceOscillator {
  sma?: number | undefined;
  dpo?: number | undefined;

  constructor(data?: IDetrendedPriceOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sma = _data['sma'];
      this.dpo = _data['dpo'];
    }
  }

  static fromJS(data: any): DetrendedPriceOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new DetrendedPriceOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sma'] = this.sma;
    data['dpo'] = this.dpo;
    return data;
  }
}

export interface IDetrendedPriceOscillator {
  sma?: number | undefined;
  dpo?: number | undefined;
}

export class ElderRayIndex implements IElderRayIndex {
  bull?: number | undefined;
  bear?: number | undefined;

  constructor(data?: IElderRayIndex) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.bull = _data['bull'];
      this.bear = _data['bear'];
    }
  }

  static fromJS(data: any): ElderRayIndex {
    data = typeof data === 'object' ? data : {};
    let result = new ElderRayIndex();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['bull'] = this.bull;
    data['bear'] = this.bear;
    return data;
  }
}

export interface IElderRayIndex {
  bull?: number | undefined;
  bear?: number | undefined;
}

export class GatorOscillator implements IGatorOscillator {
  upper?: number | undefined;
  lower?: number | undefined;
  upperExpanding?: boolean;
  lowerExpanding?: boolean;

  constructor(data?: IGatorOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.lower = _data['lower'];
      this.upperExpanding = _data['upperExpanding'];
      this.lowerExpanding = _data['lowerExpanding'];
    }
  }

  static fromJS(data: any): GatorOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new GatorOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['lower'] = this.lower;
    data['upperExpanding'] = this.upperExpanding;
    data['lowerExpanding'] = this.lowerExpanding;
    return data;
  }
}

export interface IGatorOscillator {
  upper?: number | undefined;
  lower?: number | undefined;
  upperExpanding?: boolean;
  lowerExpanding?: boolean;
}

export class MovingAverageConvergenceDivergence
  implements IMovingAverageConvergenceDivergence
{
  macd?: number | undefined;
  signal?: number | undefined;
  histogram?: number | undefined;

  constructor(data?: IMovingAverageConvergenceDivergence) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.macd = _data['macd'];
      this.signal = _data['signal'];
      this.histogram = _data['histogram'];
    }
  }

  static fromJS(data: any): MovingAverageConvergenceDivergence {
    data = typeof data === 'object' ? data : {};
    let result = new MovingAverageConvergenceDivergence();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['macd'] = this.macd;
    data['signal'] = this.signal;
    data['histogram'] = this.histogram;
    return data;
  }
}

export interface IMovingAverageConvergenceDivergence {
  macd?: number | undefined;
  signal?: number | undefined;
  histogram?: number | undefined;
}

export class OnBalanceVolume implements IOnBalanceVolume {
  obv?: number | undefined;
  sma?: number | undefined;

  constructor(data?: IOnBalanceVolume) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.obv = _data['obv'];
      this.sma = _data['sma'];
    }
  }

  static fromJS(data: any): OnBalanceVolume {
    data = typeof data === 'object' ? data : {};
    let result = new OnBalanceVolume();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['obv'] = this.obv;
    data['sma'] = this.sma;
    return data;
  }
}

export interface IOnBalanceVolume {
  obv?: number | undefined;
  sma?: number | undefined;
}

export class PercentagePriceOscillator implements IPercentagePriceOscillator {
  ppo?: number | undefined;
  signal?: number | undefined;
  histogram?: number | undefined;

  constructor(data?: IPercentagePriceOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ppo = _data['ppo'];
      this.signal = _data['signal'];
      this.histogram = _data['histogram'];
    }
  }

  static fromJS(data: any): PercentagePriceOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new PercentagePriceOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ppo'] = this.ppo;
    data['signal'] = this.signal;
    data['histogram'] = this.histogram;
    return data;
  }
}

export interface IPercentagePriceOscillator {
  ppo?: number | undefined;
  signal?: number | undefined;
  histogram?: number | undefined;
}

export class PriceMomentumOscillator implements IPriceMomentumOscillator {
  pmo?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IPriceMomentumOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pmo = _data['pmo'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): PriceMomentumOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new PriceMomentumOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pmo'] = this.pmo;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IPriceMomentumOscillator {
  pmo?: number | undefined;
  signal?: number | undefined;
}

export class RateOfChange implements IRateOfChange {
  momentum?: number | undefined;
  roc?: number | undefined;
  sma?: number | undefined;

  constructor(data?: IRateOfChange) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.momentum = _data['momentum'];
      this.roc = _data['roc'];
      this.sma = _data['sma'];
    }
  }

  static fromJS(data: any): RateOfChange {
    data = typeof data === 'object' ? data : {};
    let result = new RateOfChange();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['momentum'] = this.momentum;
    data['roc'] = this.roc;
    data['sma'] = this.sma;
    return data;
  }
}

export interface IRateOfChange {
  momentum?: number | undefined;
  roc?: number | undefined;
  sma?: number | undefined;
}

export class RocWithBands implements IRocWithBands {
  roc?: number | undefined;
  ema?: number | undefined;
  upper?: number | undefined;
  lower?: number | undefined;

  constructor(data?: IRocWithBands) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.roc = _data['roc'];
      this.ema = _data['ema'];
      this.upper = _data['upper'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): RocWithBands {
    data = typeof data === 'object' ? data : {};
    let result = new RocWithBands();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['roc'] = this.roc;
    data['ema'] = this.ema;
    data['upper'] = this.upper;
    data['lower'] = this.lower;
    return data;
  }
}

export interface IRocWithBands {
  roc?: number | undefined;
  ema?: number | undefined;
  upper?: number | undefined;
  lower?: number | undefined;
}

export class StochasticFastOscillator implements IStochasticFastOscillator {
  sfo?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IStochasticFastOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sfo = _data['sfo'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): StochasticFastOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new StochasticFastOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sfo'] = this.sfo;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IStochasticFastOscillator {
  sfo?: number | undefined;
  signal?: number | undefined;
}

export class StochasticMomentumIndex implements IStochasticMomentumIndex {
  smi?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IStochasticMomentumIndex) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.smi = _data['smi'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): StochasticMomentumIndex {
    data = typeof data === 'object' ? data : {};
    let result = new StochasticMomentumIndex();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['smi'] = this.smi;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IStochasticMomentumIndex {
  smi?: number | undefined;
  signal?: number | undefined;
}

export class StochasticOscillator implements IStochasticOscillator {
  oscillator?: number | undefined;
  signal?: number | undefined;
  percentJ?: number | undefined;

  constructor(data?: IStochasticOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.oscillator = _data['oscillator'];
      this.signal = _data['signal'];
      this.percentJ = _data['percentJ'];
    }
  }

  static fromJS(data: any): StochasticOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new StochasticOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['oscillator'] = this.oscillator;
    data['signal'] = this.signal;
    data['percentJ'] = this.percentJ;
    return data;
  }
}

export interface IStochasticOscillator {
  oscillator?: number | undefined;
  signal?: number | undefined;
  percentJ?: number | undefined;
}

export class StochasticRSI implements IStochasticRSI {
  stochRsi?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IStochasticRSI) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.stochRsi = _data['stochRsi'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): StochasticRSI {
    data = typeof data === 'object' ? data : {};
    let result = new StochasticRSI();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['stochRsi'] = this.stochRsi;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IStochasticRSI {
  stochRsi?: number | undefined;
  signal?: number | undefined;
}

export class TripleEmaOscillator implements ITripleEmaOscillator {
  emA3?: number | undefined;
  trix?: number | undefined;
  signal?: number | undefined;

  constructor(data?: ITripleEmaOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.emA3 = _data['emA3'];
      this.trix = _data['trix'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): TripleEmaOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new TripleEmaOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['emA3'] = this.emA3;
    data['trix'] = this.trix;
    data['signal'] = this.signal;
    return data;
  }
}

export interface ITripleEmaOscillator {
  emA3?: number | undefined;
  trix?: number | undefined;
  signal?: number | undefined;
}

export class TrueStrengthIndex implements ITrueStrengthIndex {
  tsi?: number | undefined;
  signal?: number | undefined;

  constructor(data?: ITrueStrengthIndex) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tsi = _data['tsi'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): TrueStrengthIndex {
    data = typeof data === 'object' ? data : {};
    let result = new TrueStrengthIndex();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tsi'] = this.tsi;
    data['signal'] = this.signal;
    return data;
  }
}

export interface ITrueStrengthIndex {
  tsi?: number | undefined;
  signal?: number | undefined;
}

export class PriceOtherIndicators
  extends FeatureContainer
  implements IPriceOtherIndicators
{
  fractalChaosBands?: FractalChaosBand;
  hurstExponent?: number | undefined;
  pivot?: Pivot;
  pivotPoints?: PivotPoints;
  priceRelativeStrength?: PriceRelativeStrength;
  projectionOscillator?: ProjectionOscillator;
  rollingPivotPoints?: PivotPoints;
  williamsFractal?: WilliamsFractal;
  verticalHorizontalFilter?: VerticalHorizontalFilter;

  constructor(data?: IPriceOtherIndicators) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.fractalChaosBands = _data['fractalChaosBands']
        ? FractalChaosBand.fromJS(_data['fractalChaosBands'])
        : <any>undefined;
      this.hurstExponent = _data['hurstExponent'];
      this.pivot = _data['pivot']
        ? Pivot.fromJS(_data['pivot'])
        : <any>undefined;
      this.pivotPoints = _data['pivotPoints']
        ? PivotPoints.fromJS(_data['pivotPoints'])
        : <any>undefined;
      this.priceRelativeStrength = _data['priceRelativeStrength']
        ? PriceRelativeStrength.fromJS(_data['priceRelativeStrength'])
        : <any>undefined;
      this.projectionOscillator = _data['projectionOscillator']
        ? ProjectionOscillator.fromJS(_data['projectionOscillator'])
        : <any>undefined;
      this.rollingPivotPoints = _data['rollingPivotPoints']
        ? PivotPoints.fromJS(_data['rollingPivotPoints'])
        : <any>undefined;
      this.williamsFractal = _data['williamsFractal']
        ? WilliamsFractal.fromJS(_data['williamsFractal'])
        : <any>undefined;
      this.verticalHorizontalFilter = _data['verticalHorizontalFilter']
        ? VerticalHorizontalFilter.fromJS(_data['verticalHorizontalFilter'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): PriceOtherIndicators {
    data = typeof data === 'object' ? data : {};
    let result = new PriceOtherIndicators();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fractalChaosBands'] = this.fractalChaosBands
      ? this.fractalChaosBands.toJSON()
      : <any>undefined;
    data['hurstExponent'] = this.hurstExponent;
    data['pivot'] = this.pivot ? this.pivot.toJSON() : <any>undefined;
    data['pivotPoints'] = this.pivotPoints
      ? this.pivotPoints.toJSON()
      : <any>undefined;
    data['priceRelativeStrength'] = this.priceRelativeStrength
      ? this.priceRelativeStrength.toJSON()
      : <any>undefined;
    data['projectionOscillator'] = this.projectionOscillator
      ? this.projectionOscillator.toJSON()
      : <any>undefined;
    data['rollingPivotPoints'] = this.rollingPivotPoints
      ? this.rollingPivotPoints.toJSON()
      : <any>undefined;
    data['williamsFractal'] = this.williamsFractal
      ? this.williamsFractal.toJSON()
      : <any>undefined;
    data['verticalHorizontalFilter'] = this.verticalHorizontalFilter
      ? this.verticalHorizontalFilter.toJSON()
      : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceOtherIndicators extends IFeatureContainer {
  fractalChaosBands?: FractalChaosBand;
  hurstExponent?: number | undefined;
  pivot?: Pivot;
  pivotPoints?: PivotPoints;
  priceRelativeStrength?: PriceRelativeStrength;
  projectionOscillator?: ProjectionOscillator;
  rollingPivotPoints?: PivotPoints;
  williamsFractal?: WilliamsFractal;
  verticalHorizontalFilter?: VerticalHorizontalFilter;
}

export class FractalChaosBand implements IFractalChaosBand {
  upper?: number | undefined;
  lower?: number | undefined;

  constructor(data?: IFractalChaosBand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): FractalChaosBand {
    data = typeof data === 'object' ? data : {};
    let result = new FractalChaosBand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['lower'] = this.lower;
    return data;
  }
}

export interface IFractalChaosBand {
  upper?: number | undefined;
  lower?: number | undefined;
}

export class Pivot implements IPivot {
  highPoint?: number | undefined;
  lowPoint?: number | undefined;
  highLine?: number | undefined;
  lowLine?: number | undefined;
  highTrend?: PivotTrend;
  lowTrend?: PivotTrend;

  constructor(data?: IPivot) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.highPoint = _data['highPoint'];
      this.lowPoint = _data['lowPoint'];
      this.highLine = _data['highLine'];
      this.lowLine = _data['lowLine'];
      this.highTrend = _data['highTrend'];
      this.lowTrend = _data['lowTrend'];
    }
  }

  static fromJS(data: any): Pivot {
    data = typeof data === 'object' ? data : {};
    let result = new Pivot();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['highPoint'] = this.highPoint;
    data['lowPoint'] = this.lowPoint;
    data['highLine'] = this.highLine;
    data['lowLine'] = this.lowLine;
    data['highTrend'] = this.highTrend;
    data['lowTrend'] = this.lowTrend;
    return data;
  }
}

export interface IPivot {
  highPoint?: number | undefined;
  lowPoint?: number | undefined;
  highLine?: number | undefined;
  lowLine?: number | undefined;
  highTrend?: PivotTrend;
  lowTrend?: PivotTrend;
}

export enum PivotTrend {
  None = 'None',
  HigherHigh = 'HigherHigh',
  LowerHigh = 'LowerHigh',
  HigherLow = 'HigherLow',
  LowerLow = 'LowerLow',
}

export class PivotPoints implements IPivotPoints {
  r1?: number | undefined;
  r2?: number | undefined;
  r3?: number | undefined;
  pp?: number | undefined;
  s1?: number | undefined;
  s2?: number | undefined;
  s3?: number | undefined;

  constructor(data?: IPivotPoints) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.r1 = _data['r1'];
      this.r2 = _data['r2'];
      this.r3 = _data['r3'];
      this.pp = _data['pp'];
      this.s1 = _data['s1'];
      this.s2 = _data['s2'];
      this.s3 = _data['s3'];
    }
  }

  static fromJS(data: any): PivotPoints {
    data = typeof data === 'object' ? data : {};
    let result = new PivotPoints();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['r1'] = this.r1;
    data['r2'] = this.r2;
    data['r3'] = this.r3;
    data['pp'] = this.pp;
    data['s1'] = this.s1;
    data['s2'] = this.s2;
    data['s3'] = this.s3;
    return data;
  }
}

export interface IPivotPoints {
  r1?: number | undefined;
  r2?: number | undefined;
  r3?: number | undefined;
  pp?: number | undefined;
  s1?: number | undefined;
  s2?: number | undefined;
  s3?: number | undefined;
}

export class PriceRelativeStrength implements IPriceRelativeStrength {
  prs?: number | undefined;
  sma?: number | undefined;
  percent?: number | undefined;

  constructor(data?: IPriceRelativeStrength) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.prs = _data['prs'];
      this.sma = _data['sma'];
      this.percent = _data['percent'];
    }
  }

  static fromJS(data: any): PriceRelativeStrength {
    data = typeof data === 'object' ? data : {};
    let result = new PriceRelativeStrength();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['prs'] = this.prs;
    data['sma'] = this.sma;
    data['percent'] = this.percent;
    return data;
  }
}

export interface IPriceRelativeStrength {
  prs?: number | undefined;
  sma?: number | undefined;
  percent?: number | undefined;
}

export class ProjectionOscillator implements IProjectionOscillator {
  pbo?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IProjectionOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pbo = _data['pbo'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): ProjectionOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new ProjectionOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pbo'] = this.pbo;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IProjectionOscillator {
  pbo?: number | undefined;
  signal?: number | undefined;
}

export class WilliamsFractal implements IWilliamsFractal {
  fractalBear?: number | undefined;
  fractalBull?: number | undefined;

  constructor(data?: IWilliamsFractal) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.fractalBear = _data['fractalBear'];
      this.fractalBull = _data['fractalBull'];
    }
  }

  static fromJS(data: any): WilliamsFractal {
    data = typeof data === 'object' ? data : {};
    let result = new WilliamsFractal();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fractalBear'] = this.fractalBear;
    data['fractalBull'] = this.fractalBull;
    return data;
  }
}

export interface IWilliamsFractal {
  fractalBear?: number | undefined;
  fractalBull?: number | undefined;
}

export class VerticalHorizontalFilter implements IVerticalHorizontalFilter {
  vhf?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IVerticalHorizontalFilter) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.vhf = _data['vhf'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): VerticalHorizontalFilter {
    data = typeof data === 'object' ? data : {};
    let result = new VerticalHorizontalFilter();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['vhf'] = this.vhf;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IVerticalHorizontalFilter {
  vhf?: number | undefined;
  signal?: number | undefined;
}

export class PricePeak extends FeatureContainer implements IPricePeak {
  highestHigh?: boolean;
  offsetPreviousHH?: number | undefined;
  offsetNextHH?: number | undefined;
  lowestLow?: boolean;
  offsetPreviousLL?: number | undefined;
  offsetNextLL?: number | undefined;

  constructor(data?: IPricePeak) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.highestHigh = _data['highestHigh'];
      this.offsetPreviousHH = _data['offsetPreviousHH'];
      this.offsetNextHH = _data['offsetNextHH'];
      this.lowestLow = _data['lowestLow'];
      this.offsetPreviousLL = _data['offsetPreviousLL'];
      this.offsetNextLL = _data['offsetNextLL'];
    }
  }

  static fromJS(data: any): PricePeak {
    data = typeof data === 'object' ? data : {};
    let result = new PricePeak();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['highestHigh'] = this.highestHigh;
    data['offsetPreviousHH'] = this.offsetPreviousHH;
    data['offsetNextHH'] = this.offsetNextHH;
    data['lowestLow'] = this.lowestLow;
    data['offsetPreviousLL'] = this.offsetPreviousLL;
    data['offsetNextLL'] = this.offsetNextLL;
    super.toJSON(data);
    return data;
  }
}

export interface IPricePeak extends IFeatureContainer {
  highestHigh?: boolean;
  offsetPreviousHH?: number | undefined;
  offsetNextHH?: number | undefined;
  lowestLow?: boolean;
  offsetPreviousLL?: number | undefined;
  offsetNextLL?: number | undefined;
}

export class PriceReturn extends FeatureContainer implements IPriceReturn {
  day?: ReturnValue;
  twoDay?: ReturnValue;
  week?: ReturnValue;

  constructor(data?: IPriceReturn) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.day = _data['day']
        ? ReturnValue.fromJS(_data['day'])
        : <any>undefined;
      this.twoDay = _data['twoDay']
        ? ReturnValue.fromJS(_data['twoDay'])
        : <any>undefined;
      this.week = _data['week']
        ? ReturnValue.fromJS(_data['week'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): PriceReturn {
    data = typeof data === 'object' ? data : {};
    let result = new PriceReturn();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['day'] = this.day ? this.day.toJSON() : <any>undefined;
    data['twoDay'] = this.twoDay ? this.twoDay.toJSON() : <any>undefined;
    data['week'] = this.week ? this.week.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceReturn extends IFeatureContainer {
  day?: ReturnValue;
  twoDay?: ReturnValue;
  week?: ReturnValue;
}

export class ReturnValue implements IReturnValue {
  return?: number | undefined;
  interval?: number | undefined;
  rank2?: number | undefined;
  rank3?: number | undefined;
  rank4?: number | undefined;
  rank6?: number | undefined;
  rank8?: number | undefined;
  rank12?: number | undefined;

  constructor(data?: IReturnValue) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.return = _data['return'];
      this.interval = _data['interval'];
      this.rank2 = _data['rank2'];
      this.rank3 = _data['rank3'];
      this.rank4 = _data['rank4'];
      this.rank6 = _data['rank6'];
      this.rank8 = _data['rank8'];
      this.rank12 = _data['rank12'];
    }
  }

  static fromJS(data: any): ReturnValue {
    data = typeof data === 'object' ? data : {};
    let result = new ReturnValue();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['return'] = this.return;
    data['interval'] = this.interval;
    data['rank2'] = this.rank2;
    data['rank3'] = this.rank3;
    data['rank4'] = this.rank4;
    data['rank6'] = this.rank6;
    data['rank8'] = this.rank8;
    data['rank12'] = this.rank12;
    return data;
  }
}

export interface IReturnValue {
  return?: number | undefined;
  interval?: number | undefined;
  rank2?: number | undefined;
  rank3?: number | undefined;
  rank4?: number | undefined;
  rank6?: number | undefined;
  rank8?: number | undefined;
  rank12?: number | undefined;
}

export class PriceTrends extends FeatureContainer implements IPriceTrends {
  slope?: SlopeHour;
  aroon?: Aroon;
  adx?: AverageDirectionalIndex;
  atrTrailingStop?: AtrTrailingStop;
  chandelierExit?: ChandelierExit;
  hilbertTransform?: HilbertTransformInstantaneousTrendLine;
  ichimokuCloud?: IchimokuCloud;
  mcGinleyDynamic?: McGinleyDynamic;
  movingAverageEnvelope?: MovingAverageEnvelope;
  parabolicSAR?: ParabolicSAR;
  superTrend?: SuperTrend;
  vortexIndicator?: VortexIndicator;
  williamsAlligator?: WilliamsAlligator;

  constructor(data?: IPriceTrends) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.slope = _data['slope']
        ? SlopeHour.fromJS(_data['slope'])
        : <any>undefined;
      this.aroon = _data['aroon']
        ? Aroon.fromJS(_data['aroon'])
        : <any>undefined;
      this.adx = _data['adx']
        ? AverageDirectionalIndex.fromJS(_data['adx'])
        : <any>undefined;
      this.atrTrailingStop = _data['atrTrailingStop']
        ? AtrTrailingStop.fromJS(_data['atrTrailingStop'])
        : <any>undefined;
      this.chandelierExit = _data['chandelierExit']
        ? ChandelierExit.fromJS(_data['chandelierExit'])
        : <any>undefined;
      this.hilbertTransform = _data['hilbertTransform']
        ? HilbertTransformInstantaneousTrendLine.fromJS(
            _data['hilbertTransform']
          )
        : <any>undefined;
      this.ichimokuCloud = _data['ichimokuCloud']
        ? IchimokuCloud.fromJS(_data['ichimokuCloud'])
        : <any>undefined;
      this.mcGinleyDynamic = _data['mcGinleyDynamic']
        ? McGinleyDynamic.fromJS(_data['mcGinleyDynamic'])
        : <any>undefined;
      this.movingAverageEnvelope = _data['movingAverageEnvelope']
        ? MovingAverageEnvelope.fromJS(_data['movingAverageEnvelope'])
        : <any>undefined;
      this.parabolicSAR = _data['parabolicSAR']
        ? ParabolicSAR.fromJS(_data['parabolicSAR'])
        : <any>undefined;
      this.superTrend = _data['superTrend']
        ? SuperTrend.fromJS(_data['superTrend'])
        : <any>undefined;
      this.vortexIndicator = _data['vortexIndicator']
        ? VortexIndicator.fromJS(_data['vortexIndicator'])
        : <any>undefined;
      this.williamsAlligator = _data['williamsAlligator']
        ? WilliamsAlligator.fromJS(_data['williamsAlligator'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): PriceTrends {
    data = typeof data === 'object' ? data : {};
    let result = new PriceTrends();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['slope'] = this.slope ? this.slope.toJSON() : <any>undefined;
    data['aroon'] = this.aroon ? this.aroon.toJSON() : <any>undefined;
    data['adx'] = this.adx ? this.adx.toJSON() : <any>undefined;
    data['atrTrailingStop'] = this.atrTrailingStop
      ? this.atrTrailingStop.toJSON()
      : <any>undefined;
    data['chandelierExit'] = this.chandelierExit
      ? this.chandelierExit.toJSON()
      : <any>undefined;
    data['hilbertTransform'] = this.hilbertTransform
      ? this.hilbertTransform.toJSON()
      : <any>undefined;
    data['ichimokuCloud'] = this.ichimokuCloud
      ? this.ichimokuCloud.toJSON()
      : <any>undefined;
    data['mcGinleyDynamic'] = this.mcGinleyDynamic
      ? this.mcGinleyDynamic.toJSON()
      : <any>undefined;
    data['movingAverageEnvelope'] = this.movingAverageEnvelope
      ? this.movingAverageEnvelope.toJSON()
      : <any>undefined;
    data['parabolicSAR'] = this.parabolicSAR
      ? this.parabolicSAR.toJSON()
      : <any>undefined;
    data['superTrend'] = this.superTrend
      ? this.superTrend.toJSON()
      : <any>undefined;
    data['vortexIndicator'] = this.vortexIndicator
      ? this.vortexIndicator.toJSON()
      : <any>undefined;
    data['williamsAlligator'] = this.williamsAlligator
      ? this.williamsAlligator.toJSON()
      : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceTrends extends IFeatureContainer {
  slope?: SlopeHour;
  aroon?: Aroon;
  adx?: AverageDirectionalIndex;
  atrTrailingStop?: AtrTrailingStop;
  chandelierExit?: ChandelierExit;
  hilbertTransform?: HilbertTransformInstantaneousTrendLine;
  ichimokuCloud?: IchimokuCloud;
  mcGinleyDynamic?: McGinleyDynamic;
  movingAverageEnvelope?: MovingAverageEnvelope;
  parabolicSAR?: ParabolicSAR;
  superTrend?: SuperTrend;
  vortexIndicator?: VortexIndicator;
  williamsAlligator?: WilliamsAlligator;
}

export class SlopeHour implements ISlopeHour {
  high6?: number | undefined;
  high8?: number | undefined;
  high12?: number | undefined;
  high24?: number | undefined;
  low6?: number | undefined;
  low8?: number | undefined;
  low12?: number | undefined;
  low24?: number | undefined;

  constructor(data?: ISlopeHour) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.high6 = _data['high6'];
      this.high8 = _data['high8'];
      this.high12 = _data['high12'];
      this.high24 = _data['high24'];
      this.low6 = _data['low6'];
      this.low8 = _data['low8'];
      this.low12 = _data['low12'];
      this.low24 = _data['low24'];
    }
  }

  static fromJS(data: any): SlopeHour {
    data = typeof data === 'object' ? data : {};
    let result = new SlopeHour();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['high6'] = this.high6;
    data['high8'] = this.high8;
    data['high12'] = this.high12;
    data['high24'] = this.high24;
    data['low6'] = this.low6;
    data['low8'] = this.low8;
    data['low12'] = this.low12;
    data['low24'] = this.low24;
    return data;
  }
}

export interface ISlopeHour {
  high6?: number | undefined;
  high8?: number | undefined;
  high12?: number | undefined;
  high24?: number | undefined;
  low6?: number | undefined;
  low8?: number | undefined;
  low12?: number | undefined;
  low24?: number | undefined;
}

export class Aroon implements IAroon {
  up?: number | undefined;
  down?: number | undefined;
  oscillator?: number | undefined;

  constructor(data?: IAroon) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.up = _data['up'];
      this.down = _data['down'];
      this.oscillator = _data['oscillator'];
    }
  }

  static fromJS(data: any): Aroon {
    data = typeof data === 'object' ? data : {};
    let result = new Aroon();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['up'] = this.up;
    data['down'] = this.down;
    data['oscillator'] = this.oscillator;
    return data;
  }
}

export interface IAroon {
  up?: number | undefined;
  down?: number | undefined;
  oscillator?: number | undefined;
}

export class AverageDirectionalIndex implements IAverageDirectionalIndex {
  pdi?: number | undefined;
  mdi?: number | undefined;
  adx?: number | undefined;
  adxr?: number | undefined;

  constructor(data?: IAverageDirectionalIndex) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pdi = _data['pdi'];
      this.mdi = _data['mdi'];
      this.adx = _data['adx'];
      this.adxr = _data['adxr'];
    }
  }

  static fromJS(data: any): AverageDirectionalIndex {
    data = typeof data === 'object' ? data : {};
    let result = new AverageDirectionalIndex();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pdi'] = this.pdi;
    data['mdi'] = this.mdi;
    data['adx'] = this.adx;
    data['adxr'] = this.adxr;
    return data;
  }
}

export interface IAverageDirectionalIndex {
  pdi?: number | undefined;
  mdi?: number | undefined;
  adx?: number | undefined;
  adxr?: number | undefined;
}

export class AtrTrailingStop implements IAtrTrailingStop {
  atrStop?: number | undefined;
  buyStop?: number | undefined;
  sellStop?: number | undefined;

  constructor(data?: IAtrTrailingStop) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.atrStop = _data['atrStop'];
      this.buyStop = _data['buyStop'];
      this.sellStop = _data['sellStop'];
    }
  }

  static fromJS(data: any): AtrTrailingStop {
    data = typeof data === 'object' ? data : {};
    let result = new AtrTrailingStop();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['atrStop'] = this.atrStop;
    data['buyStop'] = this.buyStop;
    data['sellStop'] = this.sellStop;
    return data;
  }
}

export interface IAtrTrailingStop {
  atrStop?: number | undefined;
  buyStop?: number | undefined;
  sellStop?: number | undefined;
}

export class ChandelierExit implements IChandelierExit {
  short?: number | undefined;
  long?: number | undefined;

  constructor(data?: IChandelierExit) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.short = _data['short'];
      this.long = _data['long'];
    }
  }

  static fromJS(data: any): ChandelierExit {
    data = typeof data === 'object' ? data : {};
    let result = new ChandelierExit();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['short'] = this.short;
    data['long'] = this.long;
    return data;
  }
}

export interface IChandelierExit {
  short?: number | undefined;
  long?: number | undefined;
}

export class HilbertTransformInstantaneousTrendLine
  implements IHilbertTransformInstantaneousTrendLine
{
  dominantCyclePeriods?: number | undefined;
  trendLine?: number | undefined;
  smoothPrice?: number | undefined;

  constructor(data?: IHilbertTransformInstantaneousTrendLine) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.dominantCyclePeriods = _data['dominantCyclePeriods'];
      this.trendLine = _data['trendLine'];
      this.smoothPrice = _data['smoothPrice'];
    }
  }

  static fromJS(data: any): HilbertTransformInstantaneousTrendLine {
    data = typeof data === 'object' ? data : {};
    let result = new HilbertTransformInstantaneousTrendLine();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dominantCyclePeriods'] = this.dominantCyclePeriods;
    data['trendLine'] = this.trendLine;
    data['smoothPrice'] = this.smoothPrice;
    return data;
  }
}

export interface IHilbertTransformInstantaneousTrendLine {
  dominantCyclePeriods?: number | undefined;
  trendLine?: number | undefined;
  smoothPrice?: number | undefined;
}

export class IchimokuCloud implements IIchimokuCloud {
  signal?: number | undefined;
  base?: number | undefined;
  leadingA?: number | undefined;
  leadingB?: number | undefined;
  lagging?: number | undefined;

  constructor(data?: IIchimokuCloud) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.signal = _data['signal'];
      this.base = _data['base'];
      this.leadingA = _data['leadingA'];
      this.leadingB = _data['leadingB'];
      this.lagging = _data['lagging'];
    }
  }

  static fromJS(data: any): IchimokuCloud {
    data = typeof data === 'object' ? data : {};
    let result = new IchimokuCloud();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['signal'] = this.signal;
    data['base'] = this.base;
    data['leadingA'] = this.leadingA;
    data['leadingB'] = this.leadingB;
    data['lagging'] = this.lagging;
    return data;
  }
}

export interface IIchimokuCloud {
  signal?: number | undefined;
  base?: number | undefined;
  leadingA?: number | undefined;
  leadingB?: number | undefined;
  lagging?: number | undefined;
}

export class McGinleyDynamic implements IMcGinleyDynamic {
  mcGinleyDynamic6?: number | undefined;
  mcGinleyDynamic12?: number | undefined;
  mcGinleyDynamic24?: number | undefined;
  mcGinleyDynamic168?: number | undefined;

  constructor(data?: IMcGinleyDynamic) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.mcGinleyDynamic6 = _data['mcGinleyDynamic6'];
      this.mcGinleyDynamic12 = _data['mcGinleyDynamic12'];
      this.mcGinleyDynamic24 = _data['mcGinleyDynamic24'];
      this.mcGinleyDynamic168 = _data['mcGinleyDynamic168'];
    }
  }

  static fromJS(data: any): McGinleyDynamic {
    data = typeof data === 'object' ? data : {};
    let result = new McGinleyDynamic();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['mcGinleyDynamic6'] = this.mcGinleyDynamic6;
    data['mcGinleyDynamic12'] = this.mcGinleyDynamic12;
    data['mcGinleyDynamic24'] = this.mcGinleyDynamic24;
    data['mcGinleyDynamic168'] = this.mcGinleyDynamic168;
    return data;
  }
}

export interface IMcGinleyDynamic {
  mcGinleyDynamic6?: number | undefined;
  mcGinleyDynamic12?: number | undefined;
  mcGinleyDynamic24?: number | undefined;
  mcGinleyDynamic168?: number | undefined;
}

export class MovingAverageEnvelope implements IMovingAverageEnvelope {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;

  constructor(data?: IMovingAverageEnvelope) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.center = _data['center'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): MovingAverageEnvelope {
    data = typeof data === 'object' ? data : {};
    let result = new MovingAverageEnvelope();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['center'] = this.center;
    data['lower'] = this.lower;
    return data;
  }
}

export interface IMovingAverageEnvelope {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
}

export class ParabolicSAR implements IParabolicSAR {
  sar?: number | undefined;
  isReversal?: boolean;

  constructor(data?: IParabolicSAR) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sar = _data['sar'];
      this.isReversal = _data['isReversal'];
    }
  }

  static fromJS(data: any): ParabolicSAR {
    data = typeof data === 'object' ? data : {};
    let result = new ParabolicSAR();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sar'] = this.sar;
    data['isReversal'] = this.isReversal;
    return data;
  }
}

export interface IParabolicSAR {
  sar?: number | undefined;
  isReversal?: boolean;
}

export class SuperTrend implements ISuperTrend {
  combined?: number | undefined;
  upper?: number | undefined;
  lower?: number | undefined;

  constructor(data?: ISuperTrend) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.combined = _data['combined'];
      this.upper = _data['upper'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): SuperTrend {
    data = typeof data === 'object' ? data : {};
    let result = new SuperTrend();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['combined'] = this.combined;
    data['upper'] = this.upper;
    data['lower'] = this.lower;
    return data;
  }
}

export interface ISuperTrend {
  combined?: number | undefined;
  upper?: number | undefined;
  lower?: number | undefined;
}

export class VortexIndicator implements IVortexIndicator {
  pvi?: number | undefined;
  nvi?: number | undefined;

  constructor(data?: IVortexIndicator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pvi = _data['pvi'];
      this.nvi = _data['nvi'];
    }
  }

  static fromJS(data: any): VortexIndicator {
    data = typeof data === 'object' ? data : {};
    let result = new VortexIndicator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pvi'] = this.pvi;
    data['nvi'] = this.nvi;
    return data;
  }
}

export interface IVortexIndicator {
  pvi?: number | undefined;
  nvi?: number | undefined;
}

export class WilliamsAlligator implements IWilliamsAlligator {
  jaw?: number | undefined;
  teeth?: number | undefined;
  lips?: number | undefined;

  constructor(data?: IWilliamsAlligator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.jaw = _data['jaw'];
      this.teeth = _data['teeth'];
      this.lips = _data['lips'];
    }
  }

  static fromJS(data: any): WilliamsAlligator {
    data = typeof data === 'object' ? data : {};
    let result = new WilliamsAlligator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['jaw'] = this.jaw;
    data['teeth'] = this.teeth;
    data['lips'] = this.lips;
    return data;
  }
}

export interface IWilliamsAlligator {
  jaw?: number | undefined;
  teeth?: number | undefined;
  lips?: number | undefined;
}

export class PriceVolatilities
  extends FeatureContainer
  implements IPriceVolatilities
{
  atr12?: AverageTrueRange;
  atr24?: AverageTrueRange;
  atr168?: AverageTrueRange;
  bollingerBands?: BollingerBand;
  choppinessIndex?: number | undefined;
  donchianChannels?: DonchianChannel;
  historicalVolatility?: number | undefined;
  keltnerChannels?: KeltnerChannel;
  standardDeviationChannel?: StandardDeviationChannel;
  starcBand?: StarcBand;
  ulcerIndex?: number | undefined;
  volatilityStop?: VolatilityStop;

  constructor(data?: IPriceVolatilities) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.atr12 = _data['atr12']
        ? AverageTrueRange.fromJS(_data['atr12'])
        : <any>undefined;
      this.atr24 = _data['atr24']
        ? AverageTrueRange.fromJS(_data['atr24'])
        : <any>undefined;
      this.atr168 = _data['atr168']
        ? AverageTrueRange.fromJS(_data['atr168'])
        : <any>undefined;
      this.bollingerBands = _data['bollingerBands']
        ? BollingerBand.fromJS(_data['bollingerBands'])
        : <any>undefined;
      this.choppinessIndex = _data['choppinessIndex'];
      this.donchianChannels = _data['donchianChannels']
        ? DonchianChannel.fromJS(_data['donchianChannels'])
        : <any>undefined;
      this.historicalVolatility = _data['historicalVolatility'];
      this.keltnerChannels = _data['keltnerChannels']
        ? KeltnerChannel.fromJS(_data['keltnerChannels'])
        : <any>undefined;
      this.standardDeviationChannel = _data['standardDeviationChannel']
        ? StandardDeviationChannel.fromJS(_data['standardDeviationChannel'])
        : <any>undefined;
      this.starcBand = _data['starcBand']
        ? StarcBand.fromJS(_data['starcBand'])
        : <any>undefined;
      this.ulcerIndex = _data['ulcerIndex'];
      this.volatilityStop = _data['volatilityStop']
        ? VolatilityStop.fromJS(_data['volatilityStop'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): PriceVolatilities {
    data = typeof data === 'object' ? data : {};
    let result = new PriceVolatilities();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['atr12'] = this.atr12 ? this.atr12.toJSON() : <any>undefined;
    data['atr24'] = this.atr24 ? this.atr24.toJSON() : <any>undefined;
    data['atr168'] = this.atr168 ? this.atr168.toJSON() : <any>undefined;
    data['bollingerBands'] = this.bollingerBands
      ? this.bollingerBands.toJSON()
      : <any>undefined;
    data['choppinessIndex'] = this.choppinessIndex;
    data['donchianChannels'] = this.donchianChannels
      ? this.donchianChannels.toJSON()
      : <any>undefined;
    data['historicalVolatility'] = this.historicalVolatility;
    data['keltnerChannels'] = this.keltnerChannels
      ? this.keltnerChannels.toJSON()
      : <any>undefined;
    data['standardDeviationChannel'] = this.standardDeviationChannel
      ? this.standardDeviationChannel.toJSON()
      : <any>undefined;
    data['starcBand'] = this.starcBand
      ? this.starcBand.toJSON()
      : <any>undefined;
    data['ulcerIndex'] = this.ulcerIndex;
    data['volatilityStop'] = this.volatilityStop
      ? this.volatilityStop.toJSON()
      : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceVolatilities extends IFeatureContainer {
  atr12?: AverageTrueRange;
  atr24?: AverageTrueRange;
  atr168?: AverageTrueRange;
  bollingerBands?: BollingerBand;
  choppinessIndex?: number | undefined;
  donchianChannels?: DonchianChannel;
  historicalVolatility?: number | undefined;
  keltnerChannels?: KeltnerChannel;
  standardDeviationChannel?: StandardDeviationChannel;
  starcBand?: StarcBand;
  ulcerIndex?: number | undefined;
  volatilityStop?: VolatilityStop;
}

export class AverageTrueRange implements IAverageTrueRange {
  tr?: number | undefined;
  atr?: number | undefined;
  atrp?: number | undefined;

  constructor(data?: IAverageTrueRange) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tr = _data['tr'];
      this.atr = _data['atr'];
      this.atrp = _data['atrp'];
    }
  }

  static fromJS(data: any): AverageTrueRange {
    data = typeof data === 'object' ? data : {};
    let result = new AverageTrueRange();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tr'] = this.tr;
    data['atr'] = this.atr;
    data['atrp'] = this.atrp;
    return data;
  }
}

export interface IAverageTrueRange {
  tr?: number | undefined;
  atr?: number | undefined;
  atrp?: number | undefined;
}

export class BollingerBand implements IBollingerBand {
  upper?: number | undefined;
  lower?: number | undefined;
  percentB?: number | undefined;
  zScore?: number | undefined;
  width?: number | undefined;

  constructor(data?: IBollingerBand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.lower = _data['lower'];
      this.percentB = _data['percentB'];
      this.zScore = _data['zScore'];
      this.width = _data['width'];
    }
  }

  static fromJS(data: any): BollingerBand {
    data = typeof data === 'object' ? data : {};
    let result = new BollingerBand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['lower'] = this.lower;
    data['percentB'] = this.percentB;
    data['zScore'] = this.zScore;
    data['width'] = this.width;
    return data;
  }
}

export interface IBollingerBand {
  upper?: number | undefined;
  lower?: number | undefined;
  percentB?: number | undefined;
  zScore?: number | undefined;
  width?: number | undefined;
}

export class DonchianChannel implements IDonchianChannel {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
  width?: number | undefined;

  constructor(data?: IDonchianChannel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.center = _data['center'];
      this.lower = _data['lower'];
      this.width = _data['width'];
    }
  }

  static fromJS(data: any): DonchianChannel {
    data = typeof data === 'object' ? data : {};
    let result = new DonchianChannel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['center'] = this.center;
    data['lower'] = this.lower;
    data['width'] = this.width;
    return data;
  }
}

export interface IDonchianChannel {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
  width?: number | undefined;
}

export class KeltnerChannel implements IKeltnerChannel {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
  width?: number | undefined;

  constructor(data?: IKeltnerChannel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.center = _data['center'];
      this.lower = _data['lower'];
      this.width = _data['width'];
    }
  }

  static fromJS(data: any): KeltnerChannel {
    data = typeof data === 'object' ? data : {};
    let result = new KeltnerChannel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['center'] = this.center;
    data['lower'] = this.lower;
    data['width'] = this.width;
    return data;
  }
}

export interface IKeltnerChannel {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
  width?: number | undefined;
}

export class StandardDeviationChannel implements IStandardDeviationChannel {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
  breakPoint?: boolean;

  constructor(data?: IStandardDeviationChannel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.center = _data['center'];
      this.lower = _data['lower'];
      this.breakPoint = _data['breakPoint'];
    }
  }

  static fromJS(data: any): StandardDeviationChannel {
    data = typeof data === 'object' ? data : {};
    let result = new StandardDeviationChannel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['center'] = this.center;
    data['lower'] = this.lower;
    data['breakPoint'] = this.breakPoint;
    return data;
  }
}

export interface IStandardDeviationChannel {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
  breakPoint?: boolean;
}

export class StarcBand implements IStarcBand {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;

  constructor(data?: IStarcBand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.upper = _data['upper'];
      this.center = _data['center'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): StarcBand {
    data = typeof data === 'object' ? data : {};
    let result = new StarcBand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['upper'] = this.upper;
    data['center'] = this.center;
    data['lower'] = this.lower;
    return data;
  }
}

export interface IStarcBand {
  upper?: number | undefined;
  center?: number | undefined;
  lower?: number | undefined;
}

export class VolatilityStop implements IVolatilityStop {
  sar?: number | undefined;
  isStop?: boolean;
  upper?: number | undefined;
  lower?: number | undefined;

  constructor(data?: IVolatilityStop) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sar = _data['sar'];
      this.isStop = _data['isStop'];
      this.upper = _data['upper'];
      this.lower = _data['lower'];
    }
  }

  static fromJS(data: any): VolatilityStop {
    data = typeof data === 'object' ? data : {};
    let result = new VolatilityStop();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sar'] = this.sar;
    data['isStop'] = this.isStop;
    data['upper'] = this.upper;
    data['lower'] = this.lower;
    return data;
  }
}

export interface IVolatilityStop {
  sar?: number | undefined;
  isStop?: boolean;
  upper?: number | undefined;
  lower?: number | undefined;
}

export class PriceVolumes extends FeatureContainer implements IPriceVolumes {
  accumulationDistributionLine?: AccumulationDistributionLine;
  chaikinMoneyFlow?: ChaikinMoneyFlow;
  chaikinOscillator?: ChaikinOscillator;
  forceIndex?: number | undefined;
  klingerVolumeOscillator?: KlingerVolumeOscillator;
  moneyFlowIndex?: number | undefined;
  percentageVolumeOscillator?: PercentageVolumeOscillator;

  constructor(data?: IPriceVolumes) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.accumulationDistributionLine = _data['accumulationDistributionLine']
        ? AccumulationDistributionLine.fromJS(
            _data['accumulationDistributionLine']
          )
        : <any>undefined;
      this.chaikinMoneyFlow = _data['chaikinMoneyFlow']
        ? ChaikinMoneyFlow.fromJS(_data['chaikinMoneyFlow'])
        : <any>undefined;
      this.chaikinOscillator = _data['chaikinOscillator']
        ? ChaikinOscillator.fromJS(_data['chaikinOscillator'])
        : <any>undefined;
      this.forceIndex = _data['forceIndex'];
      this.klingerVolumeOscillator = _data['klingerVolumeOscillator']
        ? KlingerVolumeOscillator.fromJS(_data['klingerVolumeOscillator'])
        : <any>undefined;
      this.moneyFlowIndex = _data['moneyFlowIndex'];
      this.percentageVolumeOscillator = _data['percentageVolumeOscillator']
        ? PercentageVolumeOscillator.fromJS(_data['percentageVolumeOscillator'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): PriceVolumes {
    data = typeof data === 'object' ? data : {};
    let result = new PriceVolumes();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accumulationDistributionLine'] = this.accumulationDistributionLine
      ? this.accumulationDistributionLine.toJSON()
      : <any>undefined;
    data['chaikinMoneyFlow'] = this.chaikinMoneyFlow
      ? this.chaikinMoneyFlow.toJSON()
      : <any>undefined;
    data['chaikinOscillator'] = this.chaikinOscillator
      ? this.chaikinOscillator.toJSON()
      : <any>undefined;
    data['forceIndex'] = this.forceIndex;
    data['klingerVolumeOscillator'] = this.klingerVolumeOscillator
      ? this.klingerVolumeOscillator.toJSON()
      : <any>undefined;
    data['moneyFlowIndex'] = this.moneyFlowIndex;
    data['percentageVolumeOscillator'] = this.percentageVolumeOscillator
      ? this.percentageVolumeOscillator.toJSON()
      : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IPriceVolumes extends IFeatureContainer {
  accumulationDistributionLine?: AccumulationDistributionLine;
  chaikinMoneyFlow?: ChaikinMoneyFlow;
  chaikinOscillator?: ChaikinOscillator;
  forceIndex?: number | undefined;
  klingerVolumeOscillator?: KlingerVolumeOscillator;
  moneyFlowIndex?: number | undefined;
  percentageVolumeOscillator?: PercentageVolumeOscillator;
}

export class AccumulationDistributionLine
  implements IAccumulationDistributionLine
{
  moneyFlowMultiplier?: number | undefined;
  moneyFlowVolume?: number | undefined;
  adl?: number | undefined;
  adlSma?: number | undefined;

  constructor(data?: IAccumulationDistributionLine) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.moneyFlowMultiplier = _data['moneyFlowMultiplier'];
      this.moneyFlowVolume = _data['moneyFlowVolume'];
      this.adl = _data['adl'];
      this.adlSma = _data['adlSma'];
    }
  }

  static fromJS(data: any): AccumulationDistributionLine {
    data = typeof data === 'object' ? data : {};
    let result = new AccumulationDistributionLine();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['moneyFlowMultiplier'] = this.moneyFlowMultiplier;
    data['moneyFlowVolume'] = this.moneyFlowVolume;
    data['adl'] = this.adl;
    data['adlSma'] = this.adlSma;
    return data;
  }
}

export interface IAccumulationDistributionLine {
  moneyFlowMultiplier?: number | undefined;
  moneyFlowVolume?: number | undefined;
  adl?: number | undefined;
  adlSma?: number | undefined;
}

export class ChaikinMoneyFlow implements IChaikinMoneyFlow {
  moneyFlowMultiplier?: number | undefined;
  moneyFlowVolume?: number | undefined;
  cmf?: number | undefined;

  constructor(data?: IChaikinMoneyFlow) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.moneyFlowMultiplier = _data['moneyFlowMultiplier'];
      this.moneyFlowVolume = _data['moneyFlowVolume'];
      this.cmf = _data['cmf'];
    }
  }

  static fromJS(data: any): ChaikinMoneyFlow {
    data = typeof data === 'object' ? data : {};
    let result = new ChaikinMoneyFlow();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['moneyFlowMultiplier'] = this.moneyFlowMultiplier;
    data['moneyFlowVolume'] = this.moneyFlowVolume;
    data['cmf'] = this.cmf;
    return data;
  }
}

export interface IChaikinMoneyFlow {
  moneyFlowMultiplier?: number | undefined;
  moneyFlowVolume?: number | undefined;
  cmf?: number | undefined;
}

export class ChaikinOscillator implements IChaikinOscillator {
  moneyFlowMultiplier?: number | undefined;
  moneyFlowVolume?: number | undefined;
  adl?: number | undefined;
  oscillator?: number | undefined;

  constructor(data?: IChaikinOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.moneyFlowMultiplier = _data['moneyFlowMultiplier'];
      this.moneyFlowVolume = _data['moneyFlowVolume'];
      this.adl = _data['adl'];
      this.oscillator = _data['oscillator'];
    }
  }

  static fromJS(data: any): ChaikinOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new ChaikinOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['moneyFlowMultiplier'] = this.moneyFlowMultiplier;
    data['moneyFlowVolume'] = this.moneyFlowVolume;
    data['adl'] = this.adl;
    data['oscillator'] = this.oscillator;
    return data;
  }
}

export interface IChaikinOscillator {
  moneyFlowMultiplier?: number | undefined;
  moneyFlowVolume?: number | undefined;
  adl?: number | undefined;
  oscillator?: number | undefined;
}

export class KlingerVolumeOscillator implements IKlingerVolumeOscillator {
  oscillator?: number | undefined;
  signal?: number | undefined;

  constructor(data?: IKlingerVolumeOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.oscillator = _data['oscillator'];
      this.signal = _data['signal'];
    }
  }

  static fromJS(data: any): KlingerVolumeOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new KlingerVolumeOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['oscillator'] = this.oscillator;
    data['signal'] = this.signal;
    return data;
  }
}

export interface IKlingerVolumeOscillator {
  oscillator?: number | undefined;
  signal?: number | undefined;
}

export class PercentageVolumeOscillator implements IPercentageVolumeOscillator {
  pvo?: number | undefined;
  signal?: number | undefined;
  histogram?: number | undefined;

  constructor(data?: IPercentageVolumeOscillator) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pvo = _data['pvo'];
      this.signal = _data['signal'];
      this.histogram = _data['histogram'];
    }
  }

  static fromJS(data: any): PercentageVolumeOscillator {
    data = typeof data === 'object' ? data : {};
    let result = new PercentageVolumeOscillator();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pvo'] = this.pvo;
    data['signal'] = this.signal;
    data['histogram'] = this.histogram;
    return data;
  }
}

export interface IPercentageVolumeOscillator {
  pvo?: number | undefined;
  signal?: number | undefined;
  histogram?: number | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
