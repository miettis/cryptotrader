// <auto-generated />
using System;
using CryptoTrader.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CryptoTrader.Data.Migrations
{
    [DbContext(typeof(BinanceContext))]
    [Migration("20240304185116_OrderRelation")]
    partial class OrderRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CryptoTrader.Data.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_config");

                    b.ToTable("config", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Crypto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset?>("Followed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("followed");

                    b.Property<decimal?>("MaxPurchase")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("max_purchase");

                    b.Property<decimal?>("MaxShare")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("max_share");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("symbol");

                    b.Property<bool>("Trade")
                        .HasColumnType("boolean")
                        .HasColumnName("trade");

                    b.HasKey("Id")
                        .HasName("pk_crypto");

                    b.ToTable("crypto", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.CryptoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Accuracy")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("accuracy");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CryptoId")
                        .HasColumnType("integer")
                        .HasColumnName("crypto_id");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<int>("Samples")
                        .HasColumnType("integer")
                        .HasColumnName("samples");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_crypto_model");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_crypto_model_crypto_id");

                    b.ToTable("crypto_model", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.CryptoStatistics", b =>
                {
                    b.Property<int>("CryptoId")
                        .HasColumnType("integer")
                        .HasColumnName("crypto_id");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.HasKey("CryptoId", "StartTime", "EndTime")
                        .HasName("pk_crypto_statistics");

                    b.ToTable("crypto_statistics", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceCandleSticks", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("AbandonedBabyBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ab_bear");

                    b.Property<bool>("AbandonedBabyBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ab_bull");

                    b.Property<bool>("AboveTheStomach")
                        .HasColumnType("boolean")
                        .HasColumnName("ats");

                    b.Property<bool>("AdvanceBlock")
                        .HasColumnType("boolean")
                        .HasColumnName("adv");

                    b.Property<bool>("BelowTheStomach")
                        .HasColumnType("boolean")
                        .HasColumnName("bts");

                    b.Property<bool>("BeltHoldBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("bh_bear");

                    b.Property<bool>("BeltHoldBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("bh_bull");

                    b.Property<bool>("BreakawayBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ba_bear");

                    b.Property<bool>("BreakawayBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ba_bull");

                    b.Property<bool>("CandleBlack")
                        .HasColumnType("boolean")
                        .HasColumnName("cb");

                    b.Property<bool>("CandleShortBlack")
                        .HasColumnType("boolean")
                        .HasColumnName("csb");

                    b.Property<bool>("CandleShortWhite")
                        .HasColumnType("boolean")
                        .HasColumnName("csw");

                    b.Property<bool>("CandleWhite")
                        .HasColumnType("boolean")
                        .HasColumnName("cw");

                    b.Property<bool>("ConcealingBabySwallow")
                        .HasColumnType("boolean")
                        .HasColumnName("cbs");

                    b.Property<bool>("CounterAttackBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ca_bear");

                    b.Property<bool>("CounterAttackBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ca_bull");

                    b.Property<bool>("DarkCloudCover")
                        .HasColumnType("boolean")
                        .HasColumnName("dcc");

                    b.Property<bool>("Deliberation")
                        .HasColumnType("boolean")
                        .HasColumnName("del");

                    b.Property<bool>("Doji")
                        .HasColumnType("boolean")
                        .HasColumnName("doji");

                    b.Property<bool>("DojiDragonfly")
                        .HasColumnType("boolean")
                        .HasColumnName("dd");

                    b.Property<bool>("DojiGappingDown")
                        .HasColumnType("boolean")
                        .HasColumnName("dgd");

                    b.Property<bool>("DojiGappingUp")
                        .HasColumnType("boolean")
                        .HasColumnName("dgu");

                    b.Property<bool>("DojiGravestone")
                        .HasColumnType("boolean")
                        .HasColumnName("dgs");

                    b.Property<bool>("DojiLongLegged")
                        .HasColumnType("boolean")
                        .HasColumnName("dll");

                    b.Property<bool>("DojiNorthern")
                        .HasColumnType("boolean")
                        .HasColumnName("dn");

                    b.Property<bool>("DojiSouthern")
                        .HasColumnType("boolean")
                        .HasColumnName("ds");

                    b.Property<bool>("DojiStarBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ds_bear");

                    b.Property<bool>("DojiStarBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ds_bull");

                    b.Property<bool>("DojiStarCollapsing")
                        .HasColumnType("boolean")
                        .HasColumnName("dsc");

                    b.Property<bool>("DownsideGapThreeMethods")
                        .HasColumnType("boolean")
                        .HasColumnName("dgtm");

                    b.Property<bool>("DownsideTasukiGap")
                        .HasColumnType("boolean")
                        .HasColumnName("dtg");

                    b.Property<bool>("EngulfingBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("eng_bear");

                    b.Property<bool>("EngulfingBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("eng_bull");

                    b.Property<bool>("EveningDojiStar")
                        .HasColumnType("boolean")
                        .HasColumnName("eds");

                    b.Property<bool>("EveningStar")
                        .HasColumnType("boolean")
                        .HasColumnName("es");

                    b.Property<bool>("FallingThreeMethods")
                        .HasColumnType("boolean")
                        .HasColumnName("ftm");

                    b.Property<bool>("Hammer")
                        .HasColumnType("boolean")
                        .HasColumnName("hammer");

                    b.Property<bool>("HammerInverted")
                        .HasColumnType("boolean")
                        .HasColumnName("inv");

                    b.Property<bool>("HangingMan")
                        .HasColumnType("boolean")
                        .HasColumnName("hm");

                    b.Property<bool>("HaramiBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ha_bear");

                    b.Property<bool>("HaramiBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ha_bull");

                    b.Property<bool>("HaramiCrossBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("hc_bear");

                    b.Property<bool>("HaramiCrossBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("hc_bull");

                    b.Property<bool>("HighWaveBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("hw_bear");

                    b.Property<bool>("HighWaveBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("hw_bull");

                    b.Property<bool>("HikkakeBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("hik_bear");

                    b.Property<bool>("HikkakeBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("hik_bull");

                    b.Property<bool>("HikkakeModBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("hmod_bear");

                    b.Property<bool>("HikkakeModBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("hmod_bull");

                    b.Property<bool>("HomingPidgeon")
                        .HasColumnType("boolean")
                        .HasColumnName("hp");

                    b.Property<bool>("IdenticalThreeCrows")
                        .HasColumnType("boolean")
                        .HasColumnName("itc");

                    b.Property<bool>("InNeck")
                        .HasColumnType("boolean")
                        .HasColumnName("in");

                    b.Property<bool>("KickingBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ki_bear");

                    b.Property<bool>("KickingBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ki_bull");

                    b.Property<bool>("KickingByLengthBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("kl_bear");

                    b.Property<bool>("KickingByLengthBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("kl_bull");

                    b.Property<bool>("LadderBottom")
                        .HasColumnType("boolean")
                        .HasColumnName("lab");

                    b.Property<bool>("LastEngulfingBottom")
                        .HasColumnType("boolean")
                        .HasColumnName("leb");

                    b.Property<bool>("LastEngulfingTop")
                        .HasColumnType("boolean")
                        .HasColumnName("let");

                    b.Property<bool>("LongBlackDay")
                        .HasColumnType("boolean")
                        .HasColumnName("lbd");

                    b.Property<bool>("LongWhiteDay")
                        .HasColumnType("boolean")
                        .HasColumnName("lwd");

                    b.Property<bool>("MarubozuBlack")
                        .HasColumnType("boolean")
                        .HasColumnName("mb");

                    b.Property<bool>("MarubozuClosingBlack")
                        .HasColumnType("boolean")
                        .HasColumnName("mcb");

                    b.Property<bool>("MarubozuClosingWhite")
                        .HasColumnType("boolean")
                        .HasColumnName("mcw");

                    b.Property<bool>("MarubozuOpeningBlack")
                        .HasColumnType("boolean")
                        .HasColumnName("mob");

                    b.Property<bool>("MarubozuOpeningWhite")
                        .HasColumnType("boolean")
                        .HasColumnName("mow");

                    b.Property<bool>("MarubozuWhite")
                        .HasColumnType("boolean")
                        .HasColumnName("mw");

                    b.Property<bool>("MatHold")
                        .HasColumnType("boolean")
                        .HasColumnName("math");

                    b.Property<bool>("MatchingLow")
                        .HasColumnType("boolean")
                        .HasColumnName("ml");

                    b.Property<bool>("MeetingLinesBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ml_bear");

                    b.Property<bool>("MeetingLinesBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ml_bull");

                    b.Property<bool>("MorningDojiStar")
                        .HasColumnType("boolean")
                        .HasColumnName("mds");

                    b.Property<bool>("MorningStar")
                        .HasColumnType("boolean")
                        .HasColumnName("ms");

                    b.Property<bool>("OnNeck")
                        .HasColumnType("boolean")
                        .HasColumnName("on");

                    b.Property<bool>("PiercingPattern")
                        .HasColumnType("boolean")
                        .HasColumnName("pp");

                    b.Property<bool>("RickshawMan")
                        .HasColumnType("boolean")
                        .HasColumnName("rm");

                    b.Property<bool>("RisingThreeMethods")
                        .HasColumnType("boolean")
                        .HasColumnName("rtm");

                    b.Property<bool>("SeparatingLinesBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("sel_bear");

                    b.Property<bool>("SeparatingLinesBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("sel_bull");

                    b.Property<bool>("ShootingStarOneCandle")
                        .HasColumnType("boolean")
                        .HasColumnName("ssoc");

                    b.Property<bool>("ShootingStarTwoCandle")
                        .HasColumnType("boolean")
                        .HasColumnName("sstc");

                    b.Property<bool>("ShortLineBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("shl_bear");

                    b.Property<bool>("ShortLineBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("shl_bull");

                    b.Property<bool>("SideBySideWhiteLinesBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("sbwl_bear");

                    b.Property<bool>("SideBySideWhiteLinesBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("sbwl_bull");

                    b.Property<bool>("SpinningTopBlack")
                        .HasColumnType("boolean")
                        .HasColumnName("stb");

                    b.Property<bool>("SpinningTopWhite")
                        .HasColumnType("boolean")
                        .HasColumnName("stw");

                    b.Property<bool>("StalledPattern")
                        .HasColumnType("boolean")
                        .HasColumnName("sp");

                    b.Property<bool>("StickSandwich")
                        .HasColumnType("boolean")
                        .HasColumnName("ss");

                    b.Property<bool>("TakuriLine")
                        .HasColumnType("boolean")
                        .HasColumnName("tl");

                    b.Property<bool>("ThreeBlackCrows")
                        .HasColumnType("boolean")
                        .HasColumnName("tbc");

                    b.Property<bool>("ThreeInsideDown")
                        .HasColumnType("boolean")
                        .HasColumnName("tid");

                    b.Property<bool>("ThreeInsideUp")
                        .HasColumnType("boolean")
                        .HasColumnName("tiu");

                    b.Property<bool>("ThreeLineStrikeBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("tls_bear");

                    b.Property<bool>("ThreeLineStrikeBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("tls_bull");

                    b.Property<bool>("ThreeOutsideDown")
                        .HasColumnType("boolean")
                        .HasColumnName("tod");

                    b.Property<bool>("ThreeOutsideUp")
                        .HasColumnType("boolean")
                        .HasColumnName("tou");

                    b.Property<bool>("ThreeStarsInTheSouth")
                        .HasColumnType("boolean")
                        .HasColumnName("tsits");

                    b.Property<bool>("ThreeWhiteSoldiers")
                        .HasColumnType("boolean")
                        .HasColumnName("tws");

                    b.Property<bool>("Thrusting")
                        .HasColumnType("boolean")
                        .HasColumnName("thru");

                    b.Property<bool>("TriStarBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ts_bear");

                    b.Property<bool>("TriStarBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ts_bull");

                    b.Property<bool>("TweezersBottom")
                        .HasColumnType("boolean")
                        .HasColumnName("twb");

                    b.Property<bool>("TweezersTop")
                        .HasColumnType("boolean")
                        .HasColumnName("twt");

                    b.Property<bool>("TwoBlackGappingCandles")
                        .HasColumnType("boolean")
                        .HasColumnName("tbgc");

                    b.Property<bool>("TwoCrows")
                        .HasColumnType("boolean")
                        .HasColumnName("tc");

                    b.Property<bool>("UniqueThreeRiverBottom")
                        .HasColumnType("boolean")
                        .HasColumnName("utrb");

                    b.Property<bool>("UpsideGapSideBySideWhiteLineBearish")
                        .HasColumnType("boolean")
                        .HasColumnName("ugswl_bear");

                    b.Property<bool>("UpsideGapSideBySideWhiteLineBullish")
                        .HasColumnType("boolean")
                        .HasColumnName("ugswl_bull");

                    b.Property<bool>("UpsideGapThreeMethods")
                        .HasColumnType("boolean")
                        .HasColumnName("ugtm");

                    b.Property<bool>("UpsideGapTwoCrows")
                        .HasColumnType("boolean")
                        .HasColumnName("ugc");

                    b.Property<bool>("UpsideTasukiGap")
                        .HasColumnType("boolean")
                        .HasColumnName("utg");

                    b.Property<bool>("WindowFalling")
                        .HasColumnType("boolean")
                        .HasColumnName("wif");

                    b.Property<bool>("WindowRising")
                        .HasColumnType("boolean")
                        .HasColumnName("wir");

                    b.HasKey("Id")
                        .HasName("pk_price_candle_sticks");

                    b.ToTable("price_candle_sticks", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceCycles", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("EhlersCombFilterSpectralEstimate")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ecfse");

                    b.Property<decimal?>("EhlersCyberCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ecc");

                    b.Property<decimal?>("EhlersCycleAmplitude")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("eca");

                    b.Property<decimal?>("EhlersCycleBandPassFilter")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ecbpf");

                    b.Property<decimal?>("EhlersDualDifferentiatorDominantCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("edddc");

                    b.Property<decimal?>("EhlersEvenBetterSineWaveIndicator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ebsi");

                    b.Property<decimal?>("EhlersHomodyneDominantCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ehdc");

                    b.Property<decimal?>("EhlersInstantaneousPhaseIndicator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("eipi");

                    b.Property<decimal?>("EhlersPhaseAccumulationDominantCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("epadc");

                    b.Property<decimal?>("EhlersSimpleCycleIndicator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("esci");

                    b.Property<decimal?>("EhlersSpectrumDerivedFilterBank")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("esdfb");

                    b.Property<decimal?>("EhlersSquelchIndicator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("esi");

                    b.Property<decimal?>("EhlersZeroCrossingsDominantCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ezcdc");

                    b.Property<decimal?>("GroverLlorensCycleOscillator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("glco");

                    b.Property<decimal?>("SimpleCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("sc");

                    b.HasKey("Id")
                        .HasName("pk_price_cycles");

                    b.ToTable("price_cycles", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceMomentums", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("AbsolutePriceOscillator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("apo");

                    b.Property<decimal?>("BalanceOfPower")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("bop");

                    b.Property<decimal?>("ChandeMomentumOscillator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("cmo");

                    b.Property<decimal?>("CommodityChannelIndex")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("cci");

                    b.Property<decimal?>("RelativeStrengthIndex")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("rsi");

                    b.Property<decimal?>("SchaffTrendCycle")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("stc");

                    b.Property<decimal?>("UltimateOscillator")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ultimate");

                    b.Property<decimal?>("WilliamsR")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("williamsr");

                    b.HasKey("Id")
                        .HasName("pk_price_momentums");

                    b.ToTable("price_momentums", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceMovingAverages", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("ALMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("alma12");

                    b.Property<decimal?>("ALMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("alma168");

                    b.Property<decimal?>("ALMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("alma24");

                    b.Property<decimal?>("ALMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("alma6");

                    b.Property<decimal?>("DEMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("dema12");

                    b.Property<decimal?>("DEMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("dema168");

                    b.Property<decimal?>("DEMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("dema24");

                    b.Property<decimal?>("DEMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("dema6");

                    b.Property<decimal?>("EMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ema12");

                    b.Property<decimal?>("EMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ema168");

                    b.Property<decimal?>("EMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ema24");

                    b.Property<decimal?>("EMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ema6");

                    b.Property<decimal?>("EPMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("epma12");

                    b.Property<decimal?>("EPMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("epma168");

                    b.Property<decimal?>("EPMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("epma24");

                    b.Property<decimal?>("EPMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("epma6");

                    b.Property<decimal?>("HMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("hma12");

                    b.Property<decimal?>("HMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("hma168");

                    b.Property<decimal?>("HMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("hma24");

                    b.Property<decimal?>("HMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("hma6");

                    b.Property<decimal?>("SMMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("smma12");

                    b.Property<decimal?>("SMMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("smma168");

                    b.Property<decimal?>("SMMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("smma24");

                    b.Property<decimal?>("SMMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("smma6");

                    b.Property<decimal?>("T3_12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("t3_12");

                    b.Property<decimal?>("T3_168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("t3_168");

                    b.Property<decimal?>("T3_24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("t3_246");

                    b.Property<decimal?>("T3_6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("t3_6");

                    b.Property<decimal?>("TEMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("tema12");

                    b.Property<decimal?>("TEMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("tema168");

                    b.Property<decimal?>("TEMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("tema24");

                    b.Property<decimal?>("TEMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("tema6");

                    b.Property<decimal?>("VWMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("vwma12");

                    b.Property<decimal?>("VWMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("vwma168");

                    b.Property<decimal?>("VWMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("vwma24");

                    b.Property<decimal?>("VWMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("vwma6");

                    b.Property<decimal?>("WMA12")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("wma12");

                    b.Property<decimal?>("WMA168")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("wma168");

                    b.Property<decimal?>("WMA24")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("wma24");

                    b.Property<decimal?>("WMA6")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("wma6");

                    b.HasKey("Id")
                        .HasName("pk_price_ma");

                    b.ToTable("price_ma", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceOtherIndicators", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("HurstExponent")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("he");

                    b.HasKey("Id")
                        .HasName("pk_price_other_indicators");

                    b.ToTable("price_other_indicators", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PricePeak", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("HighestHigh")
                        .HasColumnType("boolean")
                        .HasColumnName("highest_high");

                    b.Property<bool>("LowestLow")
                        .HasColumnType("boolean")
                        .HasColumnName("lowest_low");

                    b.Property<int?>("OffsetNextHH")
                        .HasColumnType("integer")
                        .HasColumnName("offset_next_hh");

                    b.Property<int?>("OffsetNextLL")
                        .HasColumnType("integer")
                        .HasColumnName("offset_next_ll");

                    b.Property<int?>("OffsetPreviousHH")
                        .HasColumnType("integer")
                        .HasColumnName("offset_prev_hh");

                    b.Property<int?>("OffsetPreviousLL")
                        .HasColumnType("integer")
                        .HasColumnName("offset_prev_ll");

                    b.HasKey("Id")
                        .HasName("pk_price_peak");

                    b.ToTable("price_peak", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceReturn", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_price_return");

                    b.ToTable("price_return", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceTrends", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_price_trends");

                    b.ToTable("price_trends", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceVolatilities", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("ChoppinessIndex")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("chop");

                    b.Property<decimal?>("HistoricalVolatility")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("hv");

                    b.Property<decimal?>("UlcerIndex")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("ui");

                    b.HasKey("Id")
                        .HasName("pk_price_volatilities");

                    b.ToTable("price_volatilities", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceVolumes", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("ForceIndex")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("fi");

                    b.Property<decimal?>("MoneyFlowIndex")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("mfi");

                    b.HasKey("Id")
                        .HasName("pk_price_volumes");

                    b.ToTable("price_volumes", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AverageFillPrice")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("average_fill_price");

                    b.Property<long>("BinanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("binance_id");

                    b.Property<string>("CancelResponse")
                        .HasColumnType("text")
                        .HasColumnName("cancel_response");

                    b.Property<decimal?>("Commission")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("commission");

                    b.Property<string>("CreateResponse")
                        .HasColumnType("text")
                        .HasColumnName("create_response");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<decimal?>("ExecutedQuantity")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("executed_quantity");

                    b.Property<decimal>("Price")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("QuantityOwned")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("quantity_owned");

                    b.Property<decimal?>("QuantityRemaining")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("quantity_remaining");

                    b.Property<decimal?>("QuoteQuantity")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("quote_quantity");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("side");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.OrderRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("buy_order_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("quantity");

                    b.Property<int>("SellOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("sell_order_id");

                    b.HasKey("Id")
                        .HasName("pk_order_relation");

                    b.HasIndex("BuyOrderId")
                        .HasDatabaseName("ix_order_relation_buy_order_id");

                    b.HasIndex("SellOrderId")
                        .HasDatabaseName("ix_order_relation_sell_order_id");

                    b.ToTable("order_relation", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BuyQuoteVolume")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)")
                        .HasColumnName("buy_quote_volume");

                    b.Property<decimal>("BuyVolume")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)")
                        .HasColumnName("buy_volume");

                    b.Property<decimal>("Close")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("close");

                    b.Property<int>("CryptoId")
                        .HasColumnType("integer")
                        .HasColumnName("crypto_id");

                    b.Property<decimal>("High")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("high");

                    b.Property<decimal>("Low")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("low");

                    b.Property<decimal>("MarketCap")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)")
                        .HasColumnName("market_cap");

                    b.Property<decimal>("Open")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("open");

                    b.Property<decimal>("QuoteVolume")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)")
                        .HasColumnName("quote_volume");

                    b.Property<DateTimeOffset>("TimeOpen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_open");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<long?>("Trades")
                        .HasColumnType("bigint")
                        .HasColumnName("trades");

                    b.Property<decimal>("Volume")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_price");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_price_crypto_id");

                    b.ToTable("price", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.PricePrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CryptoId")
                        .HasColumnType("integer")
                        .HasColumnName("crypto_id");

                    b.Property<decimal>("High")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("high");

                    b.Property<decimal>("Low")
                        .HasPrecision(35, 15)
                        .HasColumnType("numeric(35,15)")
                        .HasColumnName("low");

                    b.Property<DateTimeOffset>("TimeOpen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_open");

                    b.HasKey("Id")
                        .HasName("pk_price_prediction");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_price_prediction_crypto_id");

                    b.ToTable("price_prediction", (string)null);
                });

            modelBuilder.Entity("CryptoTrader.Data.Crypto", b =>
                {
                    b.OwnsOne("CryptoTrader.Data.Timestamps", "Times", b1 =>
                        {
                            b1.Property<int>("CryptoId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset?>("EndCandleSticks")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_candle");

                            b1.Property<DateTimeOffset?>("EndCycle")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_cycle");

                            b1.Property<DateTimeOffset?>("EndData")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_data");

                            b1.Property<DateTimeOffset?>("EndMA")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_ma");

                            b1.Property<DateTimeOffset?>("EndMomentum")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_momentum");

                            b1.Property<DateTimeOffset?>("EndOther")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_other");

                            b1.Property<DateTimeOffset?>("EndPeak")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_peak");

                            b1.Property<DateTimeOffset?>("EndReturn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_return");

                            b1.Property<DateTimeOffset?>("EndSlope")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_slope");

                            b1.Property<DateTimeOffset?>("EndTrend")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_trend");

                            b1.Property<DateTimeOffset?>("EndVolatility")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_volatility");

                            b1.Property<DateTimeOffset?>("EndVolume")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_volume");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start");

                            b1.Property<DateTimeOffset>("StartData")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_data");

                            b1.HasKey("CryptoId");

                            b1.ToTable("crypto");

                            b1.WithOwner()
                                .HasForeignKey("CryptoId")
                                .HasConstraintName("fk_cryptos_cryptos_id");
                        });

                    b.Navigation("Times")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.CryptoModel", b =>
                {
                    b.HasOne("CryptoTrader.Data.Crypto", "Crypto")
                        .WithMany("Models")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_crypto_model_crypto_crypto_id");

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("CryptoTrader.Data.CryptoStatistics", b =>
                {
                    b.HasOne("CryptoTrader.Data.Crypto", "Crypto")
                        .WithMany("Statistics")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_crypto_statistics_cryptos_crypto_id");

                    b.OwnsOne("CryptoTrader.Data.CandlePartStatistics", "Body", b1 =>
                        {
                            b1.Property<int>("CryptoStatisticsCryptoId")
                                .HasColumnType("integer")
                                .HasColumnName("crypto_id");

                            b1.Property<DateTimeOffset>("CryptoStatisticsStartTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_time");

                            b1.Property<DateTimeOffset>("CryptoStatisticsEndTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_time");

                            b1.HasKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime");

                            b1.ToTable("crypto_statistics");

                            b1.WithOwner()
                                .HasForeignKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime")
                                .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Length", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_length_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Proportion", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("body_proportion_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.Navigation("Length")
                                .IsRequired();

                            b1.Navigation("Proportion")
                                .IsRequired();
                        });

                    b.OwnsOne("CryptoTrader.Data.CandlePartStatistics", "Candle", b1 =>
                        {
                            b1.Property<int>("CryptoStatisticsCryptoId")
                                .HasColumnType("integer")
                                .HasColumnName("crypto_id");

                            b1.Property<DateTimeOffset>("CryptoStatisticsStartTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_time");

                            b1.Property<DateTimeOffset>("CryptoStatisticsEndTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_time");

                            b1.HasKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime");

                            b1.ToTable("crypto_statistics");

                            b1.WithOwner()
                                .HasForeignKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime")
                                .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Length", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_length_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Proportion", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("candle_proportion_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.Navigation("Length")
                                .IsRequired();

                            b1.Navigation("Proportion")
                                .IsRequired();
                        });

                    b.OwnsOne("CryptoTrader.Data.CandlePartStatistics", "Lower", b1 =>
                        {
                            b1.Property<int>("CryptoStatisticsCryptoId")
                                .HasColumnType("integer")
                                .HasColumnName("crypto_id");

                            b1.Property<DateTimeOffset>("CryptoStatisticsStartTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_time");

                            b1.Property<DateTimeOffset>("CryptoStatisticsEndTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_time");

                            b1.HasKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime");

                            b1.ToTable("crypto_statistics");

                            b1.WithOwner()
                                .HasForeignKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime")
                                .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Length", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_length_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Proportion", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("lower_proportion_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.Navigation("Length")
                                .IsRequired();

                            b1.Navigation("Proportion")
                                .IsRequired();
                        });

                    b.OwnsOne("CryptoTrader.Data.CandlePartStatistics", "Upper", b1 =>
                        {
                            b1.Property<int>("CryptoStatisticsCryptoId")
                                .HasColumnType("integer")
                                .HasColumnName("crypto_id");

                            b1.Property<DateTimeOffset>("CryptoStatisticsStartTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_time");

                            b1.Property<DateTimeOffset>("CryptoStatisticsEndTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_time");

                            b1.HasKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime");

                            b1.ToTable("crypto_statistics");

                            b1.WithOwner()
                                .HasForeignKey("CryptoStatisticsCryptoId", "CryptoStatisticsStartTime", "CryptoStatisticsEndTime")
                                .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Length", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_length_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.OwnsOne("CryptoTrader.Data.CandleLimits", "Proportion", b2 =>
                                {
                                    b2.Property<int>("CandlePartStatisticsCryptoStatisticsCryptoId")
                                        .HasColumnType("integer")
                                        .HasColumnName("crypto_id");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsStartTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("start_time");

                                    b2.Property<DateTimeOffset>("CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("end_time");

                                    b2.Property<decimal>("Lim10")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim10");

                                    b2.Property<decimal>("Lim25")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim25");

                                    b2.Property<decimal>("Lim5")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim5");

                                    b2.Property<decimal>("Lim50")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim50");

                                    b2.Property<decimal>("Lim75")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim75");

                                    b2.Property<decimal>("Lim90")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim90");

                                    b2.Property<decimal>("Lim95")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_lim95");

                                    b2.Property<decimal>("Mean")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_mean");

                                    b2.Property<decimal>("Std")
                                        .HasPrecision(35, 15)
                                        .HasColumnType("numeric(35,15)")
                                        .HasColumnName("upper_proportion_std");

                                    b2.HasKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime");

                                    b2.ToTable("crypto_statistics");

                                    b2.WithOwner()
                                        .HasForeignKey("CandlePartStatisticsCryptoStatisticsCryptoId", "CandlePartStatisticsCryptoStatisticsStartTime", "CandlePartStatisticsCryptoStatisticsEndTime")
                                        .HasConstraintName("fk_crypto_statistics_crypto_statistics_crypto_id_start_time_en");
                                });

                            b1.Navigation("Length")
                                .IsRequired();

                            b1.Navigation("Proportion")
                                .IsRequired();
                        });

                    b.Navigation("Body")
                        .IsRequired();

                    b.Navigation("Candle")
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("Lower")
                        .IsRequired();

                    b.Navigation("Upper")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceCandleSticks", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("CandleSticks")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceCandleSticks", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_candle_sticks_price_id");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceCycles", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Cycles")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceCycles", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_cycles_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.Cycles.EhlersAdaptiveCyberCycle", "EhlersAdaptiveCyberCycle", b1 =>
                        {
                            b1.Property<long>("PriceCyclesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Cycle")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eacc_cycle");

                            b1.Property<decimal?>("Period")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eacc_period");

                            b1.HasKey("PriceCyclesId");

                            b1.ToTable("price_cycles");

                            b1.WithOwner()
                                .HasForeignKey("PriceCyclesId")
                                .HasConstraintName("fk_price_cycles_price_cycles_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Cycles.EhlersFourierSeriesAnalysis", "EhlersFourierSeriesAnalysis", b1 =>
                        {
                            b1.Property<long>("PriceCyclesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Roc")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("efsa_roc");

                            b1.Property<decimal?>("Wave")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("efsa_wave");

                            b1.HasKey("PriceCyclesId");

                            b1.ToTable("price_cycles");

                            b1.WithOwner()
                                .HasForeignKey("PriceCyclesId")
                                .HasConstraintName("fk_price_cycles_price_cycles_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Cycles.EhlersStochasticCyberCycle", "EhlersStochasticCyberCycle", b1 =>
                        {
                            b1.Property<long>("PriceCyclesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Cycle")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("escc_cycle");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("escc_signal");

                            b1.HasKey("PriceCyclesId");

                            b1.ToTable("price_cycles");

                            b1.WithOwner()
                                .HasForeignKey("PriceCyclesId")
                                .HasConstraintName("fk_price_cycles_price_cycles_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Cycles.HurstCycleChannel", "HurstCycleChannel", b1 =>
                        {
                            b1.Property<long>("PriceCyclesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("FastLowerBand")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_fast_lower");

                            b1.Property<decimal?>("FastMiddleBand")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_fast_middle");

                            b1.Property<decimal?>("FastUpperBand")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_fast_upper");

                            b1.Property<decimal?>("OMed")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_omed");

                            b1.Property<decimal?>("OShort")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_oshort");

                            b1.Property<decimal?>("SlowLowerBand")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_slow_lower");

                            b1.Property<decimal?>("SlowMiddleBand")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_slow_middle");

                            b1.Property<decimal?>("SlowUpperBand")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hcc_slow_upper");

                            b1.HasKey("PriceCyclesId");

                            b1.ToTable("price_cycles");

                            b1.WithOwner()
                                .HasForeignKey("PriceCyclesId")
                                .HasConstraintName("fk_price_cycles_price_cycles_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Cycles.EhlersSineWaveIndicator", "EhlersSineWaveIndicatorV1", b1 =>
                        {
                            b1.Property<long>("PriceCyclesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("LeadSine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eswi1_lead");

                            b1.Property<decimal?>("Sine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eswi1_sine");

                            b1.HasKey("PriceCyclesId");

                            b1.ToTable("price_cycles");

                            b1.WithOwner()
                                .HasForeignKey("PriceCyclesId")
                                .HasConstraintName("fk_price_cycles_price_cycles_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Cycles.EhlersSineWaveIndicator", "EhlersSineWaveIndicatorV2", b1 =>
                        {
                            b1.Property<long>("PriceCyclesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("LeadSine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eswi2_lead");

                            b1.Property<decimal?>("Sine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eswi2_sine");

                            b1.HasKey("PriceCyclesId");

                            b1.ToTable("price_cycles");

                            b1.WithOwner()
                                .HasForeignKey("PriceCyclesId")
                                .HasConstraintName("fk_price_cycles_price_cycles_id");
                        });

                    b.Navigation("EhlersAdaptiveCyberCycle")
                        .IsRequired();

                    b.Navigation("EhlersFourierSeriesAnalysis")
                        .IsRequired();

                    b.Navigation("EhlersSineWaveIndicatorV1")
                        .IsRequired();

                    b.Navigation("EhlersSineWaveIndicatorV2")
                        .IsRequired();

                    b.Navigation("EhlersStochasticCyberCycle")
                        .IsRequired();

                    b.Navigation("HurstCycleChannel")
                        .IsRequired();

                    b.Navigation("Price");
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceMomentums", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Momentum")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceMomentums", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_momentums_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.CommoditySelectionIndex", "CommoditySelectionIndex", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Csi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("csi_csi");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("csi_signal");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.AwesomeOscillator", "AwesomeOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Normalized")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ao_norm");

                            b1.Property<decimal?>("Oscillator")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ao_osc");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.ConnorsRSI", "ConnorsRSI", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("ConnorsRsi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("crsi_crsi");

                            b1.Property<decimal?>("PercentRank")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("crsi_rank");

                            b1.Property<decimal?>("Rsi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("crsi_rsi");

                            b1.Property<decimal?>("RsiStreak")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("crsi_streak");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.DetrendedPriceOscillator", "DetrendedPriceOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Dpo")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("dpo_dpo");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("dpo_sma");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.ElderRayIndex", "ElderRayIndex", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Bear")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eri_bear");

                            b1.Property<decimal?>("Bull")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("eri_bull");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.GatorOscillator", "GatorOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("go_lower");

                            b1.Property<bool>("LowerExpanding")
                                .HasColumnType("boolean")
                                .HasColumnName("go_lower_exp");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("go_upper");

                            b1.Property<bool>("UpperExpanding")
                                .HasColumnType("boolean")
                                .HasColumnName("go_upper_exp");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.MovingAverageConvergenceDivergence", "MACD", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Histogram")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("macd_hist");

                            b1.Property<decimal?>("Macd")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("macd_macd");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("macd_signal");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.OnBalanceVolume", "OnBalanceVolume", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Obv")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("obv_obv");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("obv_sma");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.PercentagePriceOscillator", "PercentagePriceOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Histogram")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ppo_hist");

                            b1.Property<decimal?>("Ppo")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ppo_ppo");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ppo_signal");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.PriceMomentumOscillator", "PriceMomentumOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Pmo")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pmo_pmo");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pmo_signal");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.RateOfChange", "RateOfChange", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Momentum")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("roc_momentum");

                            b1.Property<decimal?>("Roc")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("roc_roc");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("roc_sma");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.RocWithBands", "RocWithBands", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Ema")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rocwb_ema");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rocwb_lower");

                            b1.Property<decimal?>("Roc")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rocwb_roc");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rocwb_upper");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.StochasticFastOscillator", "StochasticFastOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Sfo")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sfo_ppo");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sfo_signal");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.StochasticMomentumIndex", "StochasticMomentumIndex", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("smi_signal");

                            b1.Property<decimal?>("Smi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("smi_smi");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.StochasticOscillator", "StochasticOscillator", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Oscillator")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("stoch_k");

                            b1.Property<decimal?>("PercentJ")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("stoch_j");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("stoch_d");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.StochasticRSI", "StochasticRSI", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("stochrsi_signal");

                            b1.Property<decimal?>("StochRsi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("stochrsi_rsi");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.TripleEmaOscillator", "TRIX", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("EMA3")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("trix_ema3");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("trix_signal");

                            b1.Property<decimal?>("Trix")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("trix_trix");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Momentum.TrueStrengthIndex", "TrueStrengthIndex", b1 =>
                        {
                            b1.Property<long>("PriceMomentumsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("tsi_signal");

                            b1.Property<decimal?>("Tsi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("tsi_tsi");

                            b1.HasKey("PriceMomentumsId");

                            b1.ToTable("price_momentums");

                            b1.WithOwner()
                                .HasForeignKey("PriceMomentumsId")
                                .HasConstraintName("fk_price_momentums_price_momentums_id");
                        });

                    b.Navigation("AwesomeOscillator")
                        .IsRequired();

                    b.Navigation("CommoditySelectionIndex")
                        .IsRequired();

                    b.Navigation("ConnorsRSI")
                        .IsRequired();

                    b.Navigation("DetrendedPriceOscillator")
                        .IsRequired();

                    b.Navigation("ElderRayIndex")
                        .IsRequired();

                    b.Navigation("GatorOscillator")
                        .IsRequired();

                    b.Navigation("MACD")
                        .IsRequired();

                    b.Navigation("OnBalanceVolume")
                        .IsRequired();

                    b.Navigation("PercentagePriceOscillator")
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("PriceMomentumOscillator")
                        .IsRequired();

                    b.Navigation("RateOfChange")
                        .IsRequired();

                    b.Navigation("RocWithBands")
                        .IsRequired();

                    b.Navigation("StochasticFastOscillator")
                        .IsRequired();

                    b.Navigation("StochasticMomentumIndex")
                        .IsRequired();

                    b.Navigation("StochasticOscillator")
                        .IsRequired();

                    b.Navigation("StochasticRSI")
                        .IsRequired();

                    b.Navigation("TRIX")
                        .IsRequired();

                    b.Navigation("TrueStrengthIndex")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceMovingAverages", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("MA")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceMovingAverages", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_ma_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.MovingAverages.KaufmansAdaptiveMovingAverage", "KAMA", b1 =>
                        {
                            b1.Property<long>("PriceMovingAveragesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("ER")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kama_er");

                            b1.Property<decimal?>("Kama")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kama_kama");

                            b1.HasKey("PriceMovingAveragesId");

                            b1.ToTable("price_ma");

                            b1.WithOwner()
                                .HasForeignKey("PriceMovingAveragesId")
                                .HasConstraintName("fk_price_moving_averages_price_moving_averages_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.MovingAverages.MesaAdaptiveMovingAverage", "MAMA", b1 =>
                        {
                            b1.Property<long>("PriceMovingAveragesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("FAMA")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mama_fama");

                            b1.Property<decimal?>("MAMA")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mama_mama");

                            b1.HasKey("PriceMovingAveragesId");

                            b1.ToTable("price_ma");

                            b1.WithOwner()
                                .HasForeignKey("PriceMovingAveragesId")
                                .HasConstraintName("fk_price_moving_averages_price_moving_averages_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.MovingAverages.SimpleMovingAverage", "SMA12", b1 =>
                        {
                            b1.Property<long>("PriceMovingAveragesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Mad")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma12_mad");

                            b1.Property<decimal?>("Mape")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma12_mape");

                            b1.Property<decimal?>("Mse")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma12_mse");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma12_sma");

                            b1.HasKey("PriceMovingAveragesId");

                            b1.ToTable("price_ma");

                            b1.WithOwner()
                                .HasForeignKey("PriceMovingAveragesId")
                                .HasConstraintName("fk_price_moving_averages_price_moving_averages_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.MovingAverages.SimpleMovingAverage", "SMA168", b1 =>
                        {
                            b1.Property<long>("PriceMovingAveragesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Mad")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma168_mad");

                            b1.Property<decimal?>("Mape")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma168_mape");

                            b1.Property<decimal?>("Mse")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma168_mse");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma168_sma");

                            b1.HasKey("PriceMovingAveragesId");

                            b1.ToTable("price_ma");

                            b1.WithOwner()
                                .HasForeignKey("PriceMovingAveragesId")
                                .HasConstraintName("fk_price_moving_averages_price_moving_averages_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.MovingAverages.SimpleMovingAverage", "SMA24", b1 =>
                        {
                            b1.Property<long>("PriceMovingAveragesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Mad")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma24_mad");

                            b1.Property<decimal?>("Mape")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma24_mape");

                            b1.Property<decimal?>("Mse")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma24_mse");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sma24_sma");

                            b1.HasKey("PriceMovingAveragesId");

                            b1.ToTable("price_ma");

                            b1.WithOwner()
                                .HasForeignKey("PriceMovingAveragesId")
                                .HasConstraintName("fk_price_moving_averages_price_moving_averages_id");
                        });

                    b.Navigation("KAMA")
                        .IsRequired();

                    b.Navigation("MAMA")
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("SMA12")
                        .IsRequired();

                    b.Navigation("SMA168")
                        .IsRequired();

                    b.Navigation("SMA24")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceOtherIndicators", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("OtherIndicators")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceOtherIndicators", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_other_indicators_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.FractalChaosBand", "FractalChaosBands", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("fcb_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("fcb_upper");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.Pivot", "Pivot", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("HighLine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pivot_highline");

                            b1.Property<decimal?>("HighPoint")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pivot_highpoint");

                            b1.Property<int>("HighTrend")
                                .HasColumnType("integer")
                                .HasColumnName("pivot_hightrend");

                            b1.Property<decimal?>("LowLine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pivot_lowline");

                            b1.Property<decimal?>("LowPoint")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pivot_lowpoint");

                            b1.Property<int>("LowTrend")
                                .HasColumnType("integer")
                                .HasColumnName("pivot_lowtrend");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.PriceRelativeStrength", "PriceRelativeStrength", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Percent")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("prs_percent");

                            b1.Property<decimal?>("Prs")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("prs_prs");

                            b1.Property<decimal?>("Sma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("prs_sma");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.ProjectionOscillator", "ProjectionOscillator", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Pbo")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("po_pbo");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("po_signal");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.VerticalHorizontalFilter", "VerticalHorizontalFilter", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vhf_signal");

                            b1.Property<decimal?>("Vhf")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vhf_ppo");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.WilliamsFractal", "WilliamsFractal", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("FractalBear")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("wf_bear");

                            b1.Property<decimal?>("FractalBull")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("wf_bull");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.PivotPoints", "PivotPoints", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("PP")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_pp");

                            b1.Property<decimal?>("R1")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_r1");

                            b1.Property<decimal?>("R2")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_r2");

                            b1.Property<decimal?>("R3")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_r3");

                            b1.Property<decimal?>("S1")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_s1");

                            b1.Property<decimal?>("S2")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_s2");

                            b1.Property<decimal?>("S3")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pp_s3");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Misc.PivotPoints", "RollingPivotPoints", b1 =>
                        {
                            b1.Property<long>("PriceOtherIndicatorsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("PP")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_pp");

                            b1.Property<decimal?>("R1")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_r1");

                            b1.Property<decimal?>("R2")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_r2");

                            b1.Property<decimal?>("R3")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_r3");

                            b1.Property<decimal?>("S1")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_s1");

                            b1.Property<decimal?>("S2")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_s2");

                            b1.Property<decimal?>("S3")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("rpp_s3");

                            b1.HasKey("PriceOtherIndicatorsId");

                            b1.ToTable("price_other_indicators");

                            b1.WithOwner()
                                .HasForeignKey("PriceOtherIndicatorsId")
                                .HasConstraintName("fk_price_other_indicators_price_other_indicators_id");
                        });

                    b.Navigation("FractalChaosBands")
                        .IsRequired();

                    b.Navigation("Pivot")
                        .IsRequired();

                    b.Navigation("PivotPoints")
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("PriceRelativeStrength")
                        .IsRequired();

                    b.Navigation("ProjectionOscillator")
                        .IsRequired();

                    b.Navigation("RollingPivotPoints")
                        .IsRequired();

                    b.Navigation("VerticalHorizontalFilter")
                        .IsRequired();

                    b.Navigation("WilliamsFractal")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PricePeak", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Peak")
                        .HasForeignKey("CryptoTrader.Data.Features.PricePeak", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_peak_price_id");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceReturn", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Return")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceReturn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_return_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.ReturnValue", "Day", b1 =>
                        {
                            b1.Property<long>("PriceReturnId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int?>("Interval")
                                .HasColumnType("integer")
                                .HasColumnName("day_interval");

                            b1.Property<int?>("Rank12")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank12");

                            b1.Property<int?>("Rank2")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank2");

                            b1.Property<int?>("Rank3")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank3");

                            b1.Property<int?>("Rank4")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank4");

                            b1.Property<int?>("Rank6")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank6");

                            b1.Property<int?>("Rank8")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank8");

                            b1.Property<decimal?>("Return")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("day_return");

                            b1.HasKey("PriceReturnId");

                            b1.ToTable("price_return");

                            b1.WithOwner()
                                .HasForeignKey("PriceReturnId")
                                .HasConstraintName("fk_price_return_price_return_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.ReturnValue", "TwoDay", b1 =>
                        {
                            b1.Property<long>("PriceReturnId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int?>("Interval")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_interval");

                            b1.Property<int?>("Rank12")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank12");

                            b1.Property<int?>("Rank2")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank2");

                            b1.Property<int?>("Rank3")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank3");

                            b1.Property<int?>("Rank4")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank4");

                            b1.Property<int?>("Rank6")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank6");

                            b1.Property<int?>("Rank8")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank8");

                            b1.Property<decimal?>("Return")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("twoday_return");

                            b1.HasKey("PriceReturnId");

                            b1.ToTable("price_return");

                            b1.WithOwner()
                                .HasForeignKey("PriceReturnId")
                                .HasConstraintName("fk_price_return_price_return_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.ReturnValue", "Week", b1 =>
                        {
                            b1.Property<long>("PriceReturnId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int?>("Interval")
                                .HasColumnType("integer")
                                .HasColumnName("week_interval");

                            b1.Property<int?>("Rank12")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank12");

                            b1.Property<int?>("Rank2")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank2");

                            b1.Property<int?>("Rank3")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank3");

                            b1.Property<int?>("Rank4")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank4");

                            b1.Property<int?>("Rank6")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank6");

                            b1.Property<int?>("Rank8")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank8");

                            b1.Property<decimal?>("Return")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("week_return");

                            b1.HasKey("PriceReturnId");

                            b1.ToTable("price_return");

                            b1.WithOwner()
                                .HasForeignKey("PriceReturnId")
                                .HasConstraintName("fk_price_return_price_return_id");
                        });

                    b.Navigation("Day")
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("TwoDay")
                        .IsRequired();

                    b.Navigation("Week")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceTrends", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Trend")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceTrends", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_trends_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.Characteristics.SlopeHour", "Slope", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("High12")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_high12");

                            b1.Property<decimal?>("High24")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_high24");

                            b1.Property<decimal?>("High6")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_high6");

                            b1.Property<decimal?>("High8")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_high8");

                            b1.Property<decimal?>("Low12")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_low12");

                            b1.Property<decimal?>("Low24")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_low24");

                            b1.Property<decimal?>("Low6")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_low6");

                            b1.Property<decimal?>("Low8")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("slope_low8");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.Aroon", "Aroon", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Down")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("aroon_down");

                            b1.Property<decimal?>("Oscillator")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("aroon_osc");

                            b1.Property<decimal?>("Up")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("aroon_up");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.AtrTrailingStop", "AtrTrailingStop", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("AtrStop")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr_stop");

                            b1.Property<decimal?>("BuyStop")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr_buy");

                            b1.Property<decimal?>("SellStop")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr_sell");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.AverageDirectionalIndex", "ADX", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Adx")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adx_adx");

                            b1.Property<decimal?>("Adxr")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adx_adxr");

                            b1.Property<decimal?>("Mdi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adx_mdi");

                            b1.Property<decimal?>("Pdi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adx_pdi");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.ChandelierExit", "ChandelierExit", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Long")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ce_long");

                            b1.Property<decimal?>("Short")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ce_short");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.HilbertTransformInstantaneousTrendLine", "HilbertTransform", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int?>("DominantCyclePeriods")
                                .HasColumnType("integer")
                                .HasColumnName("hilb_dcp");

                            b1.Property<decimal?>("SmoothPrice")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hilb_smooth");

                            b1.Property<decimal?>("TrendLine")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("hilb_trend");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.IchimokuCloud", "IchimokuCloud", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Base")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ic_base");

                            b1.Property<decimal?>("Lagging")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ic_lag");

                            b1.Property<decimal?>("LeadingA")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ic_leada");

                            b1.Property<decimal?>("LeadingB")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ic_leadb");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("ic_signal");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.McGinleyDynamic", "McGinleyDynamic", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("McGinleyDynamic12")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mgd_h12");

                            b1.Property<decimal?>("McGinleyDynamic168")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mgd_h168");

                            b1.Property<decimal?>("McGinleyDynamic24")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mgd_h24");

                            b1.Property<decimal?>("McGinleyDynamic6")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mgd_h6");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.MovingAverageEnvelope", "MovingAverageEnvelope", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Center")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mae_center");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mae_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("mae_upper");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.ParabolicSAR", "ParabolicSAR", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<bool>("IsReversal")
                                .HasColumnType("boolean")
                                .HasColumnName("par_rev");

                            b1.Property<decimal?>("SAR")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("par_sar");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.SuperTrend", "SuperTrend", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Combined")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("st_combined");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("st_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("st_upper");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.VortexIndicator", "VortexIndicator", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Nvi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vi_nvi");

                            b1.Property<decimal?>("Pvi")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vi_pvi");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Trends.WilliamsAlligator", "WilliamsAlligator", b1 =>
                        {
                            b1.Property<long>("PriceTrendsId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Jaw")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("wa_jaw");

                            b1.Property<decimal?>("Lips")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("wa_lips");

                            b1.Property<decimal?>("Teeth")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("wa_teeth");

                            b1.HasKey("PriceTrendsId");

                            b1.ToTable("price_trends");

                            b1.WithOwner()
                                .HasForeignKey("PriceTrendsId")
                                .HasConstraintName("fk_price_trends_price_trends_id");
                        });

                    b.Navigation("ADX")
                        .IsRequired();

                    b.Navigation("Aroon")
                        .IsRequired();

                    b.Navigation("AtrTrailingStop")
                        .IsRequired();

                    b.Navigation("ChandelierExit")
                        .IsRequired();

                    b.Navigation("HilbertTransform")
                        .IsRequired();

                    b.Navigation("IchimokuCloud")
                        .IsRequired();

                    b.Navigation("McGinleyDynamic")
                        .IsRequired();

                    b.Navigation("MovingAverageEnvelope")
                        .IsRequired();

                    b.Navigation("ParabolicSAR")
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("Slope")
                        .IsRequired();

                    b.Navigation("SuperTrend")
                        .IsRequired();

                    b.Navigation("VortexIndicator")
                        .IsRequired();

                    b.Navigation("WilliamsAlligator")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceVolatilities", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Volatility")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceVolatilities", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_volatilities_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.AverageTrueRange", "ATR12", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Atr")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr12_atr");

                            b1.Property<decimal?>("Atrp")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr12_atrp");

                            b1.Property<decimal?>("TR")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr12_tr");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.AverageTrueRange", "ATR168", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Atr")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr168_atr");

                            b1.Property<decimal?>("Atrp")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr168_atrp");

                            b1.Property<decimal?>("TR")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr168_tr");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.AverageTrueRange", "ATR24", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Atr")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr24_atr");

                            b1.Property<decimal?>("Atrp")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr24_atrp");

                            b1.Property<decimal?>("TR")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("atr24_tr");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.BollingerBand", "BollingerBands", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("bb_lower");

                            b1.Property<decimal?>("PercentB")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("bb_percentb");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("bb_upper");

                            b1.Property<decimal?>("Width")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("bb_width");

                            b1.Property<decimal?>("ZScore")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("bb_zscore");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.DonchianChannel", "DonchianChannels", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Center")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("dc_center");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("dc_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("dc_upper");

                            b1.Property<decimal?>("Width")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("dc_width");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.KeltnerChannel", "KeltnerChannels", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Center")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kc_center");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kc_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kc_upper");

                            b1.Property<decimal?>("Width")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kc_width");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.StandardDeviationChannel", "StandardDeviationChannel", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<bool>("BreakPoint")
                                .HasColumnType("boolean")
                                .HasColumnName("sdc_bp");

                            b1.Property<decimal?>("Center")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sdc_center");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sdc_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("sdc_upper");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.StarcBand", "StarcBand", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Center")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("starc_center");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("starc_lower");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("starc_upper");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volatility.VolatilityStop", "VolatilityStop", b1 =>
                        {
                            b1.Property<long>("PriceVolatilitiesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<bool>("IsStop")
                                .HasColumnType("boolean")
                                .HasColumnName("vstop_stop");

                            b1.Property<decimal?>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vstop_lower");

                            b1.Property<decimal?>("SAR")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vstop_sar");

                            b1.Property<decimal?>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("vstop_upper");

                            b1.HasKey("PriceVolatilitiesId");

                            b1.ToTable("price_volatilities");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolatilitiesId")
                                .HasConstraintName("fk_price_volatilities_price_volatilities_id");
                        });

                    b.Navigation("ATR12")
                        .IsRequired();

                    b.Navigation("ATR168")
                        .IsRequired();

                    b.Navigation("ATR24")
                        .IsRequired();

                    b.Navigation("BollingerBands")
                        .IsRequired();

                    b.Navigation("DonchianChannels")
                        .IsRequired();

                    b.Navigation("KeltnerChannels")
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("StandardDeviationChannel")
                        .IsRequired();

                    b.Navigation("StarcBand")
                        .IsRequired();

                    b.Navigation("VolatilityStop")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Features.PriceVolumes", b =>
                {
                    b.HasOne("CryptoTrader.Data.Price", "Price")
                        .WithOne("Volumes")
                        .HasForeignKey("CryptoTrader.Data.Features.PriceVolumes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_volumes_price_id");

                    b.OwnsOne("CryptoTrader.Data.Features.Oscillators.KlingerVolumeOscillator", "KlingerVolumeOscillator", b1 =>
                        {
                            b1.Property<long>("PriceVolumesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Oscillator")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kvo_osc");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("kvo_signal");

                            b1.HasKey("PriceVolumesId");

                            b1.ToTable("price_volumes");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolumesId")
                                .HasConstraintName("fk_price_volumes_price_volumes_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Oscillators.PercentageVolumeOscillator", "PercentageVolumeOscillator", b1 =>
                        {
                            b1.Property<long>("PriceVolumesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Histogram")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pvo_hist");

                            b1.Property<decimal?>("Pvo")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pvo_pvo");

                            b1.Property<decimal?>("Signal")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("pvo_signal");

                            b1.HasKey("PriceVolumesId");

                            b1.ToTable("price_volumes");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolumesId")
                                .HasConstraintName("fk_price_volumes_price_volumes_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volume.AccumulationDistributionLine", "AccumulationDistributionLine", b1 =>
                        {
                            b1.Property<long>("PriceVolumesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Adl")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adl_adl");

                            b1.Property<decimal?>("AdlSma")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adl_sma");

                            b1.Property<decimal?>("MoneyFlowMultiplier")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adl_mfm");

                            b1.Property<decimal?>("MoneyFlowVolume")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("adl_mfv");

                            b1.HasKey("PriceVolumesId");

                            b1.ToTable("price_volumes");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolumesId")
                                .HasConstraintName("fk_price_volumes_price_volumes_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volume.ChaikinMoneyFlow", "ChaikinMoneyFlow", b1 =>
                        {
                            b1.Property<long>("PriceVolumesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Cmf")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("cmf_cmf");

                            b1.Property<decimal?>("MoneyFlowMultiplier")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("cmf_mfm");

                            b1.Property<decimal?>("MoneyFlowVolume")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("cmf_mfv");

                            b1.HasKey("PriceVolumesId");

                            b1.ToTable("price_volumes");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolumesId")
                                .HasConstraintName("fk_price_volumes_price_volumes_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Volume.ChaikinOscillator", "ChaikinOscillator", b1 =>
                        {
                            b1.Property<long>("PriceVolumesId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal?>("Adl")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("co_adl");

                            b1.Property<decimal?>("MoneyFlowMultiplier")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("co_mfm");

                            b1.Property<decimal?>("MoneyFlowVolume")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("co_mfv");

                            b1.Property<decimal?>("Oscillator")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("co_osc");

                            b1.HasKey("PriceVolumesId");

                            b1.ToTable("price_volumes");

                            b1.WithOwner()
                                .HasForeignKey("PriceVolumesId")
                                .HasConstraintName("fk_price_volumes_price_volumes_id");
                        });

                    b.Navigation("AccumulationDistributionLine")
                        .IsRequired();

                    b.Navigation("ChaikinMoneyFlow")
                        .IsRequired();

                    b.Navigation("ChaikinOscillator")
                        .IsRequired();

                    b.Navigation("KlingerVolumeOscillator")
                        .IsRequired();

                    b.Navigation("PercentageVolumeOscillator")
                        .IsRequired();

                    b.Navigation("Price");
                });

            modelBuilder.Entity("CryptoTrader.Data.OrderRelation", b =>
                {
                    b.HasOne("CryptoTrader.Data.Order", "BuyOrder")
                        .WithMany("SellOrders")
                        .HasForeignKey("BuyOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_order_relation_order_buy_order_id");

                    b.HasOne("CryptoTrader.Data.Order", "SellOrder")
                        .WithMany()
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_relation_order_sell_order_id");

                    b.Navigation("BuyOrder");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("CryptoTrader.Data.Price", b =>
                {
                    b.HasOne("CryptoTrader.Data.Crypto", "Crypto")
                        .WithMany("Prices")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_crypto_crypto_id");

                    b.OwnsOne("CryptoTrader.Data.Average", "Avg", b1 =>
                        {
                            b1.Property<long>("PriceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal>("HL")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("avg_hl");

                            b1.Property<decimal>("HLC")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("avg_hlc");

                            b1.Property<decimal>("OC")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("avg_oc");

                            b1.Property<decimal>("OHLC")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("avg_ohlc");

                            b1.HasKey("PriceId");

                            b1.ToTable("price");

                            b1.WithOwner()
                                .HasForeignKey("PriceId")
                                .HasConstraintName("fk_prices_prices_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Characteristics.Length", "Length", b1 =>
                        {
                            b1.Property<long>("PriceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal>("Body")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("length_body");

                            b1.Property<decimal>("Candle")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("length_candle");

                            b1.Property<decimal>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("length_lower");

                            b1.Property<decimal>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("length_upper");

                            b1.HasKey("PriceId");

                            b1.ToTable("price");

                            b1.WithOwner()
                                .HasForeignKey("PriceId")
                                .HasConstraintName("fk_prices_prices_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.Features.Characteristics.Proportion", "Proportion", b1 =>
                        {
                            b1.Property<long>("PriceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<decimal>("Body")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("proportion_body");

                            b1.Property<decimal>("Lower")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("proportion_lower");

                            b1.Property<decimal>("Upper")
                                .HasPrecision(35, 15)
                                .HasColumnType("numeric(35,15)")
                                .HasColumnName("proportion_upper");

                            b1.HasKey("PriceId");

                            b1.ToTable("price");

                            b1.WithOwner()
                                .HasForeignKey("PriceId")
                                .HasConstraintName("fk_prices_prices_id");
                        });

                    b.Navigation("Avg")
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("Length")
                        .IsRequired();

                    b.Navigation("Proportion")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.PricePrediction", b =>
                {
                    b.HasOne("CryptoTrader.Data.Crypto", "Crypto")
                        .WithMany("Predictions")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_prediction_crypto_crypto_id");

                    b.OwnsOne("CryptoTrader.Data.PredictionRank", "Day", b1 =>
                        {
                            b1.Property<int>("PricePredictionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int?>("Rank12")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank12");

                            b1.Property<int?>("Rank2")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank2");

                            b1.Property<int?>("Rank3")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank3");

                            b1.Property<int?>("Rank4")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank4");

                            b1.Property<int?>("Rank6")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank6");

                            b1.Property<int?>("Rank8")
                                .HasColumnType("integer")
                                .HasColumnName("day_rank8");

                            b1.HasKey("PricePredictionId");

                            b1.ToTable("price_prediction");

                            b1.WithOwner()
                                .HasForeignKey("PricePredictionId")
                                .HasConstraintName("fk_predictions_predictions_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.PredictionRank", "TwoDay", b1 =>
                        {
                            b1.Property<int>("PricePredictionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int?>("Rank12")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank12");

                            b1.Property<int?>("Rank2")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank2");

                            b1.Property<int?>("Rank3")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank3");

                            b1.Property<int?>("Rank4")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank4");

                            b1.Property<int?>("Rank6")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank6");

                            b1.Property<int?>("Rank8")
                                .HasColumnType("integer")
                                .HasColumnName("twoday_rank8");

                            b1.HasKey("PricePredictionId");

                            b1.ToTable("price_prediction");

                            b1.WithOwner()
                                .HasForeignKey("PricePredictionId")
                                .HasConstraintName("fk_predictions_predictions_id");
                        });

                    b.OwnsOne("CryptoTrader.Data.PredictionRank", "Week", b1 =>
                        {
                            b1.Property<int>("PricePredictionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int?>("Rank12")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank12");

                            b1.Property<int?>("Rank2")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank2");

                            b1.Property<int?>("Rank3")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank3");

                            b1.Property<int?>("Rank4")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank4");

                            b1.Property<int?>("Rank6")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank6");

                            b1.Property<int?>("Rank8")
                                .HasColumnType("integer")
                                .HasColumnName("week_rank8");

                            b1.HasKey("PricePredictionId");

                            b1.ToTable("price_prediction");

                            b1.WithOwner()
                                .HasForeignKey("PricePredictionId")
                                .HasConstraintName("fk_predictions_predictions_id");
                        });

                    b.Navigation("Crypto");

                    b.Navigation("Day")
                        .IsRequired();

                    b.Navigation("TwoDay")
                        .IsRequired();

                    b.Navigation("Week")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrader.Data.Crypto", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Predictions");

                    b.Navigation("Prices");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("CryptoTrader.Data.Order", b =>
                {
                    b.Navigation("SellOrders");
                });

            modelBuilder.Entity("CryptoTrader.Data.Price", b =>
                {
                    b.Navigation("CandleSticks");

                    b.Navigation("Cycles");

                    b.Navigation("MA");

                    b.Navigation("Momentum")
                        .IsRequired();

                    b.Navigation("OtherIndicators");

                    b.Navigation("Peak");

                    b.Navigation("Return");

                    b.Navigation("Trend");

                    b.Navigation("Volatility")
                        .IsRequired();

                    b.Navigation("Volumes");
                });
#pragma warning restore 612, 618
        }
    }
}
